// File: SBA_CPU.v
// Generated by MyHDL 0.11
// Date: Tue Jun 22 21:48:02 2021


`timescale 1ns/10ps

module SBA_CPU (
    clk,
    data_in,
    WE_O,
    STB_O,
    addr_out,
    data_out
);


input clk;
input [31:0] data_in;
output WE_O;
reg WE_O;
output [3:0] STB_O;
reg [3:0] STB_O;
output [31:0] addr_out;
wire [31:0] addr_out;
output [31:0] data_out;
wire [31:0] data_out;

reg [31:0] current_pc = 0;
wire [31:0] instruction;
reg [6:0] opcode = 0;
reg [4:0] rdaddress = 0;
reg [4:0] rs1address = 0;
reg [4:0] rs2address = 0;
reg [19:0] imm = 0;
reg [2:0] funct3 = 0;
reg [6:0] funct7 = 0;
reg zero = 0;
wire [31:0] rs1out;
reg [5:0] ALUop = 0;
reg regWrite = 0;
reg branch = 0;
reg ALUsrc = 0;
reg dataSrc = 0;
reg [31:0] operand2 = 0;
reg [31:0] next_pc = 0;
reg [31:0] write_back_data = 0;
wire [31:0] branch_adder_result;
wire [31:0] pc_adder_result;
reg [31:0] imm_extended = 0;
wire branch_taken;
wire empty;
reg [31:0] result = 0;
wire [31:0] rs2out;
wire [31:0] ROM0_ADDR;
wire [7:0] ROM0_DATA_OUT_1;
wire [7:0] ROM0_DATA_OUT_2;
wire [7:0] ROM0_DATA_OUT_3;
wire [7:0] ROM0_DATA_OUT_4;
reg [63:0] ALU0_temp = 0;
reg [7:0] ROM0_Memory_block0_MemoryBank0_memory [0:32-1];

initial begin: INITIALIZE_ROM0_MEMORY_BLOCK0_MEMORYBANK0_MEMORY
    integer i;
    for(i=0; i<32; i=i+1) begin
        ROM0_Memory_block0_MemoryBank0_memory[i] = 0;
    end
end

reg [7:0] ROM0_Memory_block0_MemoryBank1_memory [0:32-1];

initial begin: INITIALIZE_ROM0_MEMORY_BLOCK0_MEMORYBANK1_MEMORY
    integer i;
    for(i=0; i<32; i=i+1) begin
        ROM0_Memory_block0_MemoryBank1_memory[i] = 0;
    end
end

reg [7:0] ROM0_Memory_block0_MemoryBank2_memory [0:32-1];

initial begin: INITIALIZE_ROM0_MEMORY_BLOCK0_MEMORYBANK2_MEMORY
    integer i;
    for(i=0; i<32; i=i+1) begin
        ROM0_Memory_block0_MemoryBank2_memory[i] = 0;
    end
end

reg [7:0] ROM0_Memory_block0_MemoryBank3_memory [0:32-1];

initial begin: INITIALIZE_ROM0_MEMORY_BLOCK0_MEMORYBANK3_MEMORY
    integer i;
    for(i=0; i<32; i=i+1) begin
        ROM0_Memory_block0_MemoryBank3_memory[i] = 0;
    end
end

reg signed [31:0] file_register0_register [0:32-1];

initial begin: INITIALIZE_FILE_REGISTER0_REGISTER
    integer i;
    for(i=0; i<32; i=i+1) begin
        file_register0_register[i] = 0;
    end
end


assign empty = 1'd0;


always @(posedge clk) begin: SBA_CPU_PC0_SEQ
    current_pc <= next_pc;
end



assign ROM0_ADDR = (current_pc >>> 2);



assign ROM0_DATA_OUT_1 = ROM0_Memory_block0_MemoryBank0_memory[ROM0_ADDR];


always @(posedge empty) begin: SBA_CPU_ROM0_MEMORY_BLOCK0_MEMORYBANK0_WRITE
    ROM0_Memory_block0_MemoryBank0_memory[ROM0_ADDR] <= empty;
end



assign ROM0_DATA_OUT_2 = ROM0_Memory_block0_MemoryBank1_memory[ROM0_ADDR];


always @(posedge empty) begin: SBA_CPU_ROM0_MEMORY_BLOCK0_MEMORYBANK1_WRITE
    ROM0_Memory_block0_MemoryBank1_memory[ROM0_ADDR] <= empty;
end



assign ROM0_DATA_OUT_3 = ROM0_Memory_block0_MemoryBank2_memory[ROM0_ADDR];


always @(posedge empty) begin: SBA_CPU_ROM0_MEMORY_BLOCK0_MEMORYBANK2_WRITE
    ROM0_Memory_block0_MemoryBank2_memory[ROM0_ADDR] <= empty;
end



assign ROM0_DATA_OUT_4 = ROM0_Memory_block0_MemoryBank3_memory[ROM0_ADDR];


always @(posedge empty) begin: SBA_CPU_ROM0_MEMORY_BLOCK0_MEMORYBANK3_WRITE
    ROM0_Memory_block0_MemoryBank3_memory[ROM0_ADDR] <= empty;
end



assign instruction = {ROM0_DATA_OUT_4, ROM0_DATA_OUT_3, ROM0_DATA_OUT_2, ROM0_DATA_OUT_1};


always @(instruction) begin: SBA_CPU_DECODER0_DECODE
    opcode = instruction[7-1:0];
    funct3 = instruction[15-1:12];
    funct7 = instruction[32-1:25];
    if ((instruction[7-1:0] == 51)) begin
        rdaddress = instruction[12-1:7];
        rs1address = instruction[20-1:15];
        rs2address = instruction[25-1:20];
        imm = 0;
    end
    else if (((instruction[7-1:0] == 3) || (instruction[7-1:0] == 19) || (instruction[7-1:0] == 103))) begin
        rdaddress = instruction[12-1:7];
        rs1address = instruction[20-1:15];
        rs2address = 0;
        if (((instruction[15-1:12] == 1) || (instruction[15-1:12] == 5))) begin
            imm = instruction[26-1:20];
        end
        else begin
            imm = instruction[32-1:20];
        end
    end
    else if ((instruction[7-1:0] == 35)) begin
        rdaddress = 0;
        rs1address = instruction[20-1:15];
        rs2address = instruction[25-1:20];
        imm = $signed({instruction[32-1:25], instruction[12-1:7]});
    end
    else if ((instruction[7-1:0] == 99)) begin
        rdaddress = 0;
        rs1address = instruction[20-1:15];
        rs2address = instruction[25-1:20];
        imm = $signed({instruction[32-1:31], instruction[8-1:7], instruction[31-1:25], instruction[12-1:8]});
    end
    else if (((instruction[7-1:0] == 55) || (instruction[7-1:0] == 23))) begin
        rdaddress = instruction[12-1:7];
        rs1address = 0;
        rs2address = 0;
        imm = $signed(instruction[32-1:12]);
    end
    else if ((instruction[7-1:0] == 111)) begin
        rdaddress = instruction[12-1:7];
        rs1address = 0;
        rs2address = 0;
        imm = $signed({instruction[32-1:31], instruction[20-1:12], instruction[21-1:20], instruction[31-1:21]});
    end
    else if ((instruction[7-1:0] == 0)) begin
        rdaddress = 0;
        rs1address = 0;
        rs2address = 0;
        imm = 0;
    end
end


always @(posedge clk) begin: SBA_CPU_FILE_REGISTER0_REGISTERUPDATE
    if ((regWrite == 1)) begin
        file_register0_register[rdaddress] <= write_back_data;
    end
end



assign rs1out = file_register0_register[rs1address];
assign rs2out = file_register0_register[rs2address];


always @(funct7, funct3, opcode) begin: SBA_CPU_SBA_CU0_CONTROL_SYSTEM
    if ((opcode == 51)) begin
        branch = 0;
        WE_O = 0;
        regWrite = 1;
        ALUsrc = 0;
        dataSrc = 0;
        STB_O = 0;
        if (((funct3 == 0) && (funct7 == 0))) begin
            ALUop = 21;
        end
        else if (((funct3 == 0) && (funct7 == 32))) begin
            ALUop = 22;
        end
        else if (((funct3 == 1) && (funct7 == 0))) begin
            ALUop = 18;
        end
        else if (((funct3 == 2) && (funct7 == 0))) begin
            ALUop = 26;
        end
        else if (((funct3 == 3) && (funct7 == 0))) begin
            ALUop = 27;
        end
        else if (((funct3 == 4) && (funct7 == 0))) begin
            ALUop = 23;
        end
        else if (((funct3 == 5) && (funct7 == 0))) begin
            ALUop = 19;
        end
        else if (((funct3 == 5) && (funct7 == 32))) begin
            ALUop = 20;
        end
        else if (((funct3 == 6) && (funct7 == 0))) begin
            ALUop = 24;
        end
        else if (((funct3 == 7) && (funct7 == 0))) begin
            ALUop = 25;
        end
        else if (((funct3 == 0) && (funct7 == 1))) begin
            ALUop = 28;
        end
        else if (((funct3 == 1) && (funct7 == 1))) begin
            ALUop = 29;
        end
        else if (((funct3 == 2) && (funct7 == 1))) begin
            ALUop = 30;
        end
        else if (((funct3 == 3) && (funct7 == 1))) begin
            ALUop = 31;
        end
        else if (((funct3 == 4) && (funct7 == 1))) begin
            ALUop = 32;
        end
        else if (((funct3 == 5) && (funct7 == 1))) begin
            ALUop = 33;
        end
        else if (((funct3 == 6) && (funct7 == 1))) begin
            ALUop = 34;
        end
        else if (((funct3 == 7) && (funct7 == 1))) begin
            ALUop = 35;
        end
    end
    else if ((opcode == 3)) begin
        branch = 0;
        WE_O = 0;
        regWrite = 1;
        ALUsrc = 1;
        dataSrc = 1;
        STB_O = {funct3, 1'b1};
        case (funct3)
            'h0: begin
                ALUop = 0;
            end
            'h1: begin
                ALUop = 1;
            end
            'h2: begin
                ALUop = 2;
            end
            'h4: begin
                ALUop = 3;
            end
            'h5: begin
                ALUop = 4;
            end
        endcase
    end
    else if ((opcode == 19)) begin
        branch = 0;
        WE_O = 0;
        regWrite = 1;
        ALUsrc = 1;
        dataSrc = 0;
        STB_O = 0;
        case (funct3)
            'h0: begin
                ALUop = 8;
            end
            'h1: begin
                ALUop = 5;
            end
            'h2: begin
                ALUop = 12;
            end
            'h3: begin
                ALUop = 13;
            end
            'h4: begin
                ALUop = 9;
            end
            'h5: begin
                case (funct7)
                    'h0: begin
                        ALUop = 6;
                    end
                    'h20: begin
                        ALUop = 7;
                    end
                endcase
            end
            'h6: begin
                ALUop = 10;
            end
            'h7: begin
                ALUop = 11;
            end
        endcase
    end
    else if ((opcode == 103)) begin
        branch = 1;
        WE_O = 0;
        regWrite = 0;
        ALUsrc = 0;
        dataSrc = 0;
        ALUop = 14;
        STB_O = 0;
    end
    else if ((opcode == 35)) begin
        branch = 0;
        WE_O = 1;
        regWrite = 0;
        ALUsrc = 1;
        dataSrc = 0;
        STB_O = {funct3, 1'b1};
        case (funct3)
            'h0: begin
                ALUop = 15;
            end
            'h1: begin
                ALUop = 16;
            end
            'h2: begin
                ALUop = 17;
            end
        endcase
    end
    else if ((opcode == 99)) begin
        branch = 1;
        WE_O = 0;
        regWrite = 0;
        ALUsrc = 0;
        dataSrc = 0;
        STB_O = 0;
        case (funct3)
            'h0: begin
                ALUop = 39;
            end
            'h1: begin
                ALUop = 40;
            end
            'h4: begin
                ALUop = 41;
            end
            'h5: begin
                ALUop = 42;
            end
            'h6: begin
                ALUop = 43;
            end
            'h7: begin
                ALUop = 44;
            end
        endcase
    end
    else if (((opcode == 55) || (opcode == 23))) begin
        WE_O = 0;
        case (opcode)
            'h37: begin
                branch = 0;
                regWrite = 1;
                ALUsrc = 1;
                dataSrc = 1;
                ALUop = 36;
                STB_O = {funct3, 1'b1};
            end
            'h17: begin
                branch = 1;
                regWrite = 0;
                ALUsrc = 1;
                dataSrc = 0;
                ALUop = 37;
                STB_O = 0;
            end
        endcase
    end
    else if ((opcode == 111)) begin
        branch = 1;
        WE_O = 0;
        regWrite = 1;
        ALUsrc = 0;
        dataSrc = 0;
        ALUop = 38;
        STB_O = 0;
    end
    else if ((opcode == 0)) begin
        branch = 0;
        WE_O = 0;
        regWrite = 0;
        ALUsrc = 0;
        dataSrc = 0;
        STB_O = 0;
    end
end


always @(current_pc, rs1out, operand2, ALUop) begin: SBA_CPU_ALU0_MULTIPLICATION
    case (ALUop)
        'h1c: begin
            ALU0_temp <= (rs1out * operand2);
        end
        'h1d: begin
            ALU0_temp <= (rs1out * operand2);
        end
        'h1e: begin
            ALU0_temp <= (rs1out * operand2[32-1:0]);
        end
        'h1f: begin
            ALU0_temp <= (rs1out[32-1:0] * operand2[32-1:0]);
        end
        default: begin
            ALU0_temp <= 0;
        end
    endcase
end


always @(operand2, rs1out, current_pc, ALU0_temp, ALUop) begin: SBA_CPU_ALU0_ALU_CALCULATION
    if ((ALUop == 0)) begin
        result = (rs1out + operand2);
        zero = 0;
    end
    else if ((ALUop == 1)) begin
        result = (rs1out + operand2);
        zero = 0;
    end
    else if ((ALUop == 2)) begin
        result = (rs1out + operand2);
        zero = 0;
    end
    else if ((ALUop == 3)) begin
        result = (rs1out + operand2);
        zero = 0;
    end
    else if ((ALUop == 4)) begin
        result = (rs1out + operand2);
        zero = 0;
    end
    else if ((ALUop == 5)) begin
        result = (rs1out << operand2);
    end
    else if ((ALUop == 6)) begin
        result = (rs1out >>> operand2);
        zero = 0;
    end
    else if ((ALUop == 7)) begin
        result = (rs1out >>> operand2);
        zero = 0;
    end
    else if ((ALUop == 8)) begin
        result = (rs1out + operand2);
        zero = 0;
    end
    else if ((ALUop == 9)) begin
        result = (rs1out ^ operand2);
        zero = 0;
    end
    else if ((ALUop == 10)) begin
        result = (rs1out | operand2);
        zero = 0;
    end
    else if ((ALUop == 11)) begin
        result = (rs1out & operand2);
        zero = 0;
    end
    else if ((ALUop == 12)) begin
        if ((rs1out < operand2)) begin
            result = 1;
            zero = 0;
        end
        else begin
            result = 0;
            zero = 0;
        end
    end
    else if ((ALUop == 13)) begin
        if (({1'b0, rs1out[31-1:0]} < {1'b0, operand2[31-1:0]})) begin
            result = 1;
            zero = 0;
        end
        else begin
            result = 0;
            zero = 0;
        end
    end
    else if ((ALUop == 14)) begin
        result = (rs1out + operand2);
        zero = 1;
    end
    else if ((ALUop == 38)) begin
        result = (current_pc + operand2);
        zero = 1;
    end
    else if ((ALUop == 15)) begin
        result = (rs1out + operand2);
        zero = 0;
    end
    else if ((ALUop == 16)) begin
        result = (rs1out + operand2);
        zero = 0;
    end
    else if ((ALUop == 17)) begin
        result = (rs1out + operand2);
        zero = 0;
    end
    else if ((ALUop == 18)) begin
        result = (rs1out << operand2[32-1:0]);
        zero = 0;
    end
    else if ((ALUop == 19)) begin
        result = (rs1out >>> operand2[32-1:0]);
        zero = 0;
    end
    else if ((ALUop == 20)) begin
        result = ((rs1out >>> operand2[32-1:0]) | ($signed({1'b0, rs1out}) << (32 - $signed({1'b0, operand2[32-1:0]}))));
        zero = 0;
    end
    else if ((ALUop == 21)) begin
        result = (rs1out + operand2);
        zero = 0;
    end
    else if ((ALUop == 22)) begin
        result = (rs1out - operand2);
        zero = 0;
    end
    else if ((ALUop == 23)) begin
        result = (rs1out ^ operand2);
        zero = 0;
    end
    else if ((ALUop == 24)) begin
        result = (rs1out | operand2);
        zero = 0;
    end
    else if ((ALUop == 25)) begin
        result = (rs1out & operand2);
        zero = 0;
    end
    else if ((ALUop == 26)) begin
        if ((rs1out < operand2)) begin
            result = 1;
            zero = 0;
        end
        else begin
            result = 0;
            zero = 0;
        end
    end
    else if ((ALUop == 27)) begin
        if (({1'b0, rs1out[31-1:0]} < {1'b0, operand2[31-1:0]})) begin
            result = 1;
            zero = 0;
        end
        else begin
            result = 0;
            zero = 0;
        end
    end
    else if ((ALUop == 28)) begin
        result = ALU0_temp[32-1:0];
        zero = 0;
    end
    else if ((ALUop == 29)) begin
        result = ALU0_temp[64-1:32];
        zero = 0;
    end
    else if ((ALUop == 30)) begin
        result = ALU0_temp[64-1:32];
        zero = 0;
    end
    else if ((ALUop == 31)) begin
        result = ALU0_temp[64-1:32];
        zero = 0;
    end
    else if ((ALUop == 32)) begin
        result = (rs1out / operand2);
        zero = 0;
    end
    else if ((ALUop == 33)) begin
        result = (rs1out[32-1:0] / operand2[32-1:0]);
        zero = 0;
    end
    else if ((ALUop == 34)) begin
        result = (rs1out % operand2);
        zero = 0;
    end
    else if ((ALUop == 35)) begin
        result = (rs1out[32-1:0] % operand2[32-1:0]);
        zero = 0;
    end
    else if ((ALUop == 36)) begin
        result = (operand2 << 12);
        zero = 0;
    end
    else if ((ALUop == 37)) begin
        result = (current_pc + (operand2 << 12));
        zero = 0;
    end
    else if ((ALUop == 39)) begin
        if ((rs1out == operand2)) begin
            zero = 1;
            result = 0;
        end
        else begin
            zero = 0;
            result = 0;
        end
    end
    else if ((ALUop == 40)) begin
        if ((rs1out != operand2)) begin
            zero = 1;
            result = 0;
        end
        else begin
            zero = 0;
            result = 0;
        end
    end
    else if ((ALUop == 41)) begin
        if ((rs1out < operand2)) begin
            zero = 1;
            result = 0;
        end
        else begin
            zero = 0;
            result = 0;
        end
    end
    else if ((ALUop == 42)) begin
        if ((rs1out >= operand2)) begin
            zero = 1;
            result = 0;
        end
        else begin
            zero = 0;
            result = 0;
        end
    end
    else if ((ALUop == 43)) begin
        if ((rs1out[32-1:0] < operand2[32-1:0])) begin
            zero = 1;
            result = 0;
        end
        else begin
            zero = 0;
            result = 0;
        end
    end
    else if ((ALUop >= 44)) begin
        if ((rs1out[32-1:0] == operand2[32-1:0])) begin
            zero = 1;
            result = 0;
        end
        else begin
            zero = 0;
            result = 0;
        end
    end
end


always @(imm, opcode) begin: SBA_CPU_IMM_GENERATOR0_EXTEND
    if (((3 == opcode) || (opcode == 19) || (opcode == 103) || (opcode == 35) || (opcode == 99))) begin
        imm_extended = $signed(imm[20-1:0]);
    end
    else if (((opcode == 55) || (opcode == 23) || (opcode == 111))) begin
        imm_extended = $signed(imm[20-1:0]);
    end
end



assign branch_adder_result = (current_pc + (imm_extended << 1));



assign pc_adder_result = (current_pc + 4);



assign branch_taken = (branch && zero);


always @(imm_extended, ALUsrc, rs2out) begin: SBA_CPU_MUX0_SELECT
    if ((ALUsrc == 0)) begin
        operand2 = rs2out;
    end
    else begin
        operand2 = imm_extended;
    end
end


always @(data_in, dataSrc, result) begin: SBA_CPU_MUX1_SELECT
    if ((dataSrc == 0)) begin
        write_back_data = result;
    end
    else begin
        write_back_data = data_in;
    end
end


always @(branch_adder_result, branch_taken, pc_adder_result) begin: SBA_CPU_MUX2_SELECT
    if ((branch_taken == 0)) begin
        next_pc = pc_adder_result;
    end
    else begin
        next_pc = branch_adder_result;
    end
end



assign data_out = rs2out;
assign addr_out = result;

endmodule
