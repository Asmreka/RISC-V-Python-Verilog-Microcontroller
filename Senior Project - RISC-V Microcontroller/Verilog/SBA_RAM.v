// File: SBA_RAM.v
// Generated by MyHDL 0.11
// Date: Tue Jun 22 21:48:38 2021


`timescale 1ns/10ps

module SBA_RAM (
    CLK,
    STB_I,
    DATA_IN,
    WE_I,
    ADDRESS_IN,
    DATA_OUT
);


input CLK;
input [3:0] STB_I;
input [31:0] DATA_IN;
input WE_I;
input [11:0] ADDRESS_IN;
output [31:0] DATA_OUT;
reg [31:0] DATA_OUT;

reg [7:0] WR_DATA_OUT_1;
reg [7:0] WR_DATA_OUT_2;
reg [7:0] WR_DATA_OUT_3;
reg [7:0] WR_DATA_OUT_4;
wire [11:0] Sliced_Address;
reg [7:0] MEM_DATA_OUT_1;
reg [7:0] MEM_DATA_OUT_2;
reg [7:0] MEM_DATA_OUT_3;
reg [7:0] MEM_DATA_OUT_4;
reg [7:0] Memory_block0_MemoryBank0_memory [0:32-1];
reg [7:0] Memory_block0_MemoryBank1_memory [0:32-1];
reg [7:0] Memory_block0_MemoryBank2_memory [0:32-1];
reg [7:0] Memory_block0_MemoryBank3_memory [0:32-1];




assign Sliced_Address = (ADDRESS_IN >>> 2);


always @(DATA_IN, WE_I, STB_I) begin: SBA_RAM_WRITEDECODER0_DECODEWRITE
    if (WE_I) begin
        if ((STB_I[3-1:0] == 0)) begin
            WR_DATA_OUT_1 = DATA_IN[8-1:0];
            WR_DATA_OUT_2 = 0;
            WR_DATA_OUT_3 = 0;
            WR_DATA_OUT_4 = 0;
        end
        else if ((STB_I[3-1:0] == 1)) begin
            WR_DATA_OUT_1 = DATA_IN[8-1:0];
            WR_DATA_OUT_2 = DATA_IN[16-1:8];
            WR_DATA_OUT_3 = 0;
            WR_DATA_OUT_4 = 0;
        end
        else if ((STB_I[3-1:0] == 2)) begin
            WR_DATA_OUT_1 = DATA_IN[8-1:0];
            WR_DATA_OUT_2 = DATA_IN[16-1:8];
            WR_DATA_OUT_3 = DATA_IN[24-1:16];
            WR_DATA_OUT_4 = DATA_IN[32-1:24];
        end
    end
end


always @(Memory_block0_MemoryBank0_memory[0], Memory_block0_MemoryBank0_memory[1], Memory_block0_MemoryBank0_memory[2], Memory_block0_MemoryBank0_memory[3], Memory_block0_MemoryBank0_memory[4], Memory_block0_MemoryBank0_memory[5], Memory_block0_MemoryBank0_memory[6], Memory_block0_MemoryBank0_memory[7], Memory_block0_MemoryBank0_memory[8], Memory_block0_MemoryBank0_memory[9], Memory_block0_MemoryBank0_memory[10], Memory_block0_MemoryBank0_memory[11], Memory_block0_MemoryBank0_memory[12], Memory_block0_MemoryBank0_memory[13], Memory_block0_MemoryBank0_memory[14], Memory_block0_MemoryBank0_memory[15], Memory_block0_MemoryBank0_memory[16], Memory_block0_MemoryBank0_memory[17], Memory_block0_MemoryBank0_memory[18], Memory_block0_MemoryBank0_memory[19], Memory_block0_MemoryBank0_memory[20], Memory_block0_MemoryBank0_memory[21], Memory_block0_MemoryBank0_memory[22], Memory_block0_MemoryBank0_memory[23], Memory_block0_MemoryBank0_memory[24], Memory_block0_MemoryBank0_memory[25], Memory_block0_MemoryBank0_memory[26], Memory_block0_MemoryBank0_memory[27], Memory_block0_MemoryBank0_memory[28], Memory_block0_MemoryBank0_memory[29], Memory_block0_MemoryBank0_memory[30], Memory_block0_MemoryBank0_memory[31], WE_I, STB_I, Sliced_Address) begin: SBA_RAM_MEMORY_BLOCK0_MEMORYBANK0_READ
    if (STB_I[3]) begin
        if ((WE_I == 0)) begin
            MEM_DATA_OUT_1 = Memory_block0_MemoryBank0_memory[Sliced_Address];
        end
    end
end


always @(posedge CLK) begin: SBA_RAM_MEMORY_BLOCK0_MEMORYBANK0_WRITE
    if (STB_I[3]) begin
        if (WE_I) begin
            Memory_block0_MemoryBank0_memory[Sliced_Address] <= WR_DATA_OUT_1;
        end
    end
end


always @(Memory_block0_MemoryBank1_memory[0], Memory_block0_MemoryBank1_memory[1], Memory_block0_MemoryBank1_memory[2], Memory_block0_MemoryBank1_memory[3], Memory_block0_MemoryBank1_memory[4], Memory_block0_MemoryBank1_memory[5], Memory_block0_MemoryBank1_memory[6], Memory_block0_MemoryBank1_memory[7], Memory_block0_MemoryBank1_memory[8], Memory_block0_MemoryBank1_memory[9], Memory_block0_MemoryBank1_memory[10], Memory_block0_MemoryBank1_memory[11], Memory_block0_MemoryBank1_memory[12], Memory_block0_MemoryBank1_memory[13], Memory_block0_MemoryBank1_memory[14], Memory_block0_MemoryBank1_memory[15], Memory_block0_MemoryBank1_memory[16], Memory_block0_MemoryBank1_memory[17], Memory_block0_MemoryBank1_memory[18], Memory_block0_MemoryBank1_memory[19], Memory_block0_MemoryBank1_memory[20], Memory_block0_MemoryBank1_memory[21], Memory_block0_MemoryBank1_memory[22], Memory_block0_MemoryBank1_memory[23], Memory_block0_MemoryBank1_memory[24], Memory_block0_MemoryBank1_memory[25], Memory_block0_MemoryBank1_memory[26], Memory_block0_MemoryBank1_memory[27], Memory_block0_MemoryBank1_memory[28], Memory_block0_MemoryBank1_memory[29], Memory_block0_MemoryBank1_memory[30], Memory_block0_MemoryBank1_memory[31], WE_I, STB_I, Sliced_Address) begin: SBA_RAM_MEMORY_BLOCK0_MEMORYBANK1_READ
    if (STB_I[3]) begin
        if ((WE_I == 0)) begin
            MEM_DATA_OUT_2 = Memory_block0_MemoryBank1_memory[Sliced_Address];
        end
    end
end


always @(posedge CLK) begin: SBA_RAM_MEMORY_BLOCK0_MEMORYBANK1_WRITE
    if (STB_I[3]) begin
        if (WE_I) begin
            Memory_block0_MemoryBank1_memory[Sliced_Address] <= WR_DATA_OUT_2;
        end
    end
end


always @(Memory_block0_MemoryBank2_memory[0], Memory_block0_MemoryBank2_memory[1], Memory_block0_MemoryBank2_memory[2], Memory_block0_MemoryBank2_memory[3], Memory_block0_MemoryBank2_memory[4], Memory_block0_MemoryBank2_memory[5], Memory_block0_MemoryBank2_memory[6], Memory_block0_MemoryBank2_memory[7], Memory_block0_MemoryBank2_memory[8], Memory_block0_MemoryBank2_memory[9], Memory_block0_MemoryBank2_memory[10], Memory_block0_MemoryBank2_memory[11], Memory_block0_MemoryBank2_memory[12], Memory_block0_MemoryBank2_memory[13], Memory_block0_MemoryBank2_memory[14], Memory_block0_MemoryBank2_memory[15], Memory_block0_MemoryBank2_memory[16], Memory_block0_MemoryBank2_memory[17], Memory_block0_MemoryBank2_memory[18], Memory_block0_MemoryBank2_memory[19], Memory_block0_MemoryBank2_memory[20], Memory_block0_MemoryBank2_memory[21], Memory_block0_MemoryBank2_memory[22], Memory_block0_MemoryBank2_memory[23], Memory_block0_MemoryBank2_memory[24], Memory_block0_MemoryBank2_memory[25], Memory_block0_MemoryBank2_memory[26], Memory_block0_MemoryBank2_memory[27], Memory_block0_MemoryBank2_memory[28], Memory_block0_MemoryBank2_memory[29], Memory_block0_MemoryBank2_memory[30], Memory_block0_MemoryBank2_memory[31], WE_I, STB_I, Sliced_Address) begin: SBA_RAM_MEMORY_BLOCK0_MEMORYBANK2_READ
    if (STB_I[3]) begin
        if ((WE_I == 0)) begin
            MEM_DATA_OUT_3 = Memory_block0_MemoryBank2_memory[Sliced_Address];
        end
    end
end


always @(posedge CLK) begin: SBA_RAM_MEMORY_BLOCK0_MEMORYBANK2_WRITE
    if (STB_I[3]) begin
        if (WE_I) begin
            Memory_block0_MemoryBank2_memory[Sliced_Address] <= WR_DATA_OUT_3;
        end
    end
end


always @(Memory_block0_MemoryBank3_memory[0], Memory_block0_MemoryBank3_memory[1], Memory_block0_MemoryBank3_memory[2], Memory_block0_MemoryBank3_memory[3], Memory_block0_MemoryBank3_memory[4], Memory_block0_MemoryBank3_memory[5], Memory_block0_MemoryBank3_memory[6], Memory_block0_MemoryBank3_memory[7], Memory_block0_MemoryBank3_memory[8], Memory_block0_MemoryBank3_memory[9], Memory_block0_MemoryBank3_memory[10], Memory_block0_MemoryBank3_memory[11], Memory_block0_MemoryBank3_memory[12], Memory_block0_MemoryBank3_memory[13], Memory_block0_MemoryBank3_memory[14], Memory_block0_MemoryBank3_memory[15], Memory_block0_MemoryBank3_memory[16], Memory_block0_MemoryBank3_memory[17], Memory_block0_MemoryBank3_memory[18], Memory_block0_MemoryBank3_memory[19], Memory_block0_MemoryBank3_memory[20], Memory_block0_MemoryBank3_memory[21], Memory_block0_MemoryBank3_memory[22], Memory_block0_MemoryBank3_memory[23], Memory_block0_MemoryBank3_memory[24], Memory_block0_MemoryBank3_memory[25], Memory_block0_MemoryBank3_memory[26], Memory_block0_MemoryBank3_memory[27], Memory_block0_MemoryBank3_memory[28], Memory_block0_MemoryBank3_memory[29], Memory_block0_MemoryBank3_memory[30], Memory_block0_MemoryBank3_memory[31], WE_I, STB_I, Sliced_Address) begin: SBA_RAM_MEMORY_BLOCK0_MEMORYBANK3_READ
    if (STB_I[3]) begin
        if ((WE_I == 0)) begin
            MEM_DATA_OUT_4 = Memory_block0_MemoryBank3_memory[Sliced_Address];
        end
    end
end


always @(posedge CLK) begin: SBA_RAM_MEMORY_BLOCK0_MEMORYBANK3_WRITE
    if (STB_I[3]) begin
        if (WE_I) begin
            Memory_block0_MemoryBank3_memory[Sliced_Address] <= WR_DATA_OUT_4;
        end
    end
end


always @(WE_I, MEM_DATA_OUT_2, STB_I, MEM_DATA_OUT_3, MEM_DATA_OUT_1, MEM_DATA_OUT_4) begin: SBA_RAM_READDECODER0_DECODEREAD
    if ((STB_I[3] == 1)) begin
        if ((WE_I == 0)) begin
            if ((STB_I[3-1:0] == 0)) begin
                if ((MEM_DATA_OUT_1[7] == 0)) begin
                    DATA_OUT = {24'h0, MEM_DATA_OUT_1};
                end
                else if ((MEM_DATA_OUT_1[7] == 1)) begin
                    DATA_OUT = {24'hffffff, MEM_DATA_OUT_1};
                end
            end
            else if ((STB_I[3-1:0] == 1)) begin
                if ((MEM_DATA_OUT_2[7] == 0)) begin
                    DATA_OUT = {16'h0, MEM_DATA_OUT_2, MEM_DATA_OUT_1};
                end
                else if ((MEM_DATA_OUT_2[7] == 1)) begin
                    DATA_OUT = {16'hffff, MEM_DATA_OUT_2, MEM_DATA_OUT_1};
                end
            end
            else if ((STB_I[3-1:0] == 2)) begin
                DATA_OUT = {MEM_DATA_OUT_4, MEM_DATA_OUT_3, MEM_DATA_OUT_2, MEM_DATA_OUT_1};
            end
            else if ((STB_I[3-1:0] == 4)) begin
                DATA_OUT = {24'h0, MEM_DATA_OUT_1};
            end
            else if ((STB_I[3-1:0] == 5)) begin
                DATA_OUT = {16'h0, MEM_DATA_OUT_2, MEM_DATA_OUT_1};
            end
        end
    end
end

endmodule
