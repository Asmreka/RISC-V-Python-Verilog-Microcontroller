// File: SBA_UART_SYS.v
// Generated by MyHDL 0.11
// Date: Tue Jun 22 21:47:42 2021


`timescale 1ns/10ps

module SBA_UART_SYS (
    clk,
    reset,
    data_in,
    we,
    STB,
    address,
    data_out,
    Tx,
    Rx
);


input clk;
input reset;
input [31:0] data_in;
input we;
input [3:0] STB;
input [31:0] address;
output [31:0] data_out;
reg [31:0] data_out;
output Tx;
reg Tx;
input Rx;

reg [15:0] baud_rate = 0;
reg [7:0] TxData = 0;
reg [7:0] RxData = 0;
reg TxEn = 0;
reg RxEn = 0;
reg TxDone = 0;
reg RxDone = 0;
reg BRG_En = 0;
reg RxFlag = 0;
reg TxFlag = 0;
reg [7:0] UART_DAT_OUT = 0;
wire UART0_tick;
wire [3:0] UART0_Nbits;
reg [4:0] UART0_RX0_Bit = 0;
reg [7:0] UART0_RX0_Read_data = 0;
reg [3:0] UART0_RX0_counter = 0;
reg [1:0] UART0_RX0_next_state = 0;
reg UART0_RX0_read_enable = 0;
reg UART0_RX0_start_bit = 1;
reg [1:0] UART0_RX0_state = 0;
reg [4:0] UART0_TX0_Bit = 0;
wire UART0_TX0_D_edge;
reg [1:0] UART0_TX0_R_edge = 0;
reg [3:0] UART0_TX0_counter = 0;
reg [7:0] UART0_TX0_in_data = 0;
reg UART0_TX0_next_state = 0;
reg UART0_TX0_start_bit = 1;
reg UART0_TX0_state = 0;
reg UART0_TX0_stop_bit = 0;
reg UART0_TX0_write_enable = 0;
wire UART0_BRG0_D_edge;
reg [1:0] UART0_BRG0_R_edge = 0;
reg [31:0] UART0_BRG0_baudRateReg = 0;

assign UART0_Nbits = 4'd8;


always @(posedge clk) begin: SBA_UART_SYS_UART_CONTROLLER0_CONNECTION
    TxFlag <= TxDone;
    RxFlag <= RxDone;
    RxEn <= 1'b1;
    UART_DAT_OUT <= RxData;
    if ((STB[3] == 1)) begin
        baud_rate <= data_in[32-1:16];
        TxData <= data_in[8-1:0];
        if (we) begin
            TxEn <= 1'b1;
            BRG_En <= 1'b1;
        end
        else begin
            BRG_En <= 1'b0;
        end
    end
    else begin
        TxEn <= 1'b0;
    end
end


always @(posedge clk, posedge reset) begin: SBA_UART_SYS_UART0_RX0_RESET_MODULE
    if (reset) begin
        UART0_RX0_state <= 1'b0;
    end
    else begin
        UART0_RX0_state <= UART0_RX0_next_state;
    end
end


always @(UART0_RX0_state, Rx, RxEn, RxDone) begin: SBA_UART_SYS_UART0_RX0_NEXT_STATE_MODULE
    case (UART0_RX0_state)
        'h0: begin
            if (((!Rx) && RxEn)) begin
                UART0_RX0_next_state <= 1'b1;
            end
            else begin
                UART0_RX0_next_state <= 1'b0;
            end
        end
        'h1: begin
            if (RxDone) begin
                UART0_RX0_next_state <= 1'b0;
            end
            else begin
                UART0_RX0_next_state <= 1'b1;
            end
        end
        default: begin
            UART0_RX0_next_state <= 1'b0;
        end
    endcase
end


always @(UART0_RX0_state, RxDone) begin: SBA_UART_SYS_UART0_RX0_ENABLE_READ_FUNC
    if ((UART0_RX0_state == 1)) begin
        UART0_RX0_read_enable <= 1'b1;
    end
    else begin
        UART0_RX0_read_enable <= 1'b0;
    end
end


always @(posedge UART0_tick) begin: SBA_UART_SYS_UART0_RX0_READ_DATA_FUNC
    if (UART0_RX0_read_enable) begin
        RxDone <= 1'b0;
        UART0_RX0_counter <= (UART0_RX0_counter + 1);
        if (((UART0_RX0_counter == 8) && UART0_RX0_start_bit)) begin
            UART0_RX0_start_bit <= 1'b0;
            UART0_RX0_counter <= 1'b0;
        end
        if (((UART0_RX0_counter == 15) && (!UART0_RX0_start_bit) && (UART0_RX0_Bit < UART0_Nbits))) begin
            UART0_RX0_Bit <= (UART0_RX0_Bit + 1);
            UART0_RX0_Read_data <= {Rx, UART0_RX0_Read_data[8-1:1]};
            UART0_RX0_counter <= 1'b0;
        end
        if (((UART0_RX0_counter == 15) && (UART0_RX0_Bit == UART0_Nbits) && Rx)) begin
            UART0_RX0_Bit <= 1'b0;
            RxDone <= 1'b1;
            UART0_RX0_counter <= 1'b0;
            UART0_RX0_start_bit <= 1'b1;
        end
    end
end


always @(posedge clk) begin: SBA_UART_SYS_UART0_RX0_ASSIGN_OUTPUT
    if ((UART0_Nbits == 8)) begin
        RxData <= UART0_RX0_Read_data[8-1:0];
    end
    if ((UART0_Nbits == 7)) begin
        RxData <= {1'b0, UART0_RX0_Read_data[8-1:1]};
    end
    if ((UART0_Nbits == 6)) begin
        RxData <= {1'b0, 1'b0, UART0_RX0_Read_data[8-1:2]};
    end
end


always @(posedge clk, posedge reset) begin: SBA_UART_SYS_UART0_TX0_RESET_MODULE
    if (reset) begin
        UART0_TX0_state <= 1'b0;
    end
    else begin
        UART0_TX0_state <= UART0_TX0_next_state;
    end
end


always @(UART0_TX0_state, UART0_TX0_D_edge, TxData, TxDone) begin: SBA_UART_SYS_UART0_TX0_NEXT_STATE_MODULE
    case (UART0_TX0_state)
        'h0: begin
            if (UART0_TX0_D_edge) begin
                UART0_TX0_next_state <= 1'b1;
            end
            else begin
                UART0_TX0_next_state <= 1'b0;
            end
        end
        'h1: begin
            if (TxDone) begin
                UART0_TX0_next_state <= 1'b0;
            end
            else begin
                UART0_TX0_next_state <= 1'b1;
            end
        end
        default: begin
            UART0_TX0_next_state <= 1'b0;
        end
    endcase
end


always @(UART0_TX0_state) begin: SBA_UART_SYS_UART0_TX0_WRITE_ENABLE_FUNC
    if ((UART0_TX0_state == 1)) begin
        UART0_TX0_write_enable <= 1'b1;
    end
    else begin
        UART0_TX0_write_enable <= 1'b0;
    end
end


always @(posedge UART0_tick) begin: SBA_UART_SYS_UART0_TX0_TX_OUTPUT
    if ((!UART0_TX0_write_enable)) begin
        if (TxEn) begin
            TxDone <= 1'b0;
        end
        UART0_TX0_start_bit <= 1'b1;
        UART0_TX0_stop_bit <= 1'b0;
    end
    else if (UART0_TX0_write_enable) begin
        UART0_TX0_counter <= (UART0_TX0_counter + 1);
        if ((UART0_TX0_start_bit && (!UART0_TX0_stop_bit))) begin
            Tx <= 1'b0;
            UART0_TX0_in_data <= TxData;
        end
        if (((UART0_TX0_counter == 15) && UART0_TX0_start_bit)) begin
            UART0_TX0_start_bit <= 1'b0;
            UART0_TX0_in_data <= {1'b0, UART0_TX0_in_data[8-1:1]};
            Tx <= UART0_TX0_in_data[0];
        end
        if (((UART0_TX0_counter == 15) && (!UART0_TX0_start_bit) && ($signed({1'b0, UART0_TX0_Bit}) < ($signed({1'b0, UART0_Nbits}) - 1)))) begin
            UART0_TX0_in_data <= {1'b0, UART0_TX0_in_data[8-1:1]};
            UART0_TX0_Bit <= (UART0_TX0_Bit + 1);
            Tx <= UART0_TX0_in_data[0];
            UART0_TX0_start_bit <= 1'b0;
            UART0_TX0_counter <= 1'b0;
        end
        if (((UART0_TX0_counter == 15) && ($signed({1'b0, UART0_TX0_Bit}) == ($signed({1'b0, UART0_Nbits}) - 1)) && (!UART0_TX0_stop_bit))) begin
            Tx <= 1'b1;
            UART0_TX0_counter <= 1'b0;
            UART0_TX0_stop_bit <= 1'b1;
        end
        if (((UART0_TX0_counter == 15) && ($signed({1'b0, UART0_TX0_Bit}) == ($signed({1'b0, UART0_Nbits}) - 1)) && UART0_TX0_stop_bit)) begin
            UART0_TX0_Bit <= 1'b0;
            TxDone <= 1'b1;
            UART0_TX0_counter <= 1'b0;
        end
    end
end


always @(posedge clk, posedge reset) begin: SBA_UART_SYS_UART0_TX0_INPUT_DETECT
    if (reset) begin
        UART0_TX0_R_edge <= 0;
    end
    else begin
        UART0_TX0_R_edge <= {UART0_TX0_R_edge[0], TxEn};
    end
end



assign UART0_TX0_D_edge = ((!UART0_TX0_R_edge[1]) && UART0_TX0_R_edge[0]);


always @(posedge clk, posedge reset) begin: SBA_UART_SYS_UART0_BRG0_GEN
    if (reset) begin
        UART0_BRG0_baudRateReg <= 1'b1;
    end
    else begin
        if (UART0_BRG0_D_edge) begin
            UART0_BRG0_baudRateReg <= 1'b1;
        end
        else if ((UART0_tick == 1)) begin
            UART0_BRG0_baudRateReg <= 1'b1;
        end
        else begin
            UART0_BRG0_baudRateReg <= (UART0_BRG0_baudRateReg + 1);
        end
    end
end



assign UART0_tick = (UART0_BRG0_baudRateReg == baud_rate);


always @(posedge clk) begin: SBA_UART_SYS_UART0_BRG0_INPUT_DETECT
    if (reset) begin
        UART0_BRG0_R_edge <= 0;
    end
    else begin
        UART0_BRG0_R_edge <= {UART0_BRG0_R_edge[0], BRG_En};
    end
end



assign UART0_BRG0_D_edge = ((!UART0_BRG0_R_edge[1]) && UART0_BRG0_R_edge[0]);


always @(TxFlag, STB, RxFlag, UART_DAT_OUT) begin: SBA_UART_SYS_CONNECTION
    case (STB)
        'h8: begin
            data_out = UART_DAT_OUT;
        end
        'h9: begin
            data_out = RxFlag;
        end
        'ha: begin
            data_out = TxFlag;
        end
    endcase
end

endmodule
