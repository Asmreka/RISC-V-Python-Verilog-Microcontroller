// File: Microcontroller.v
// Generated by MyHDL 0.11
// Date: Tue Jun 22 21:50:31 2021


`timescale 1ns/10ps

module Microcontroller (
    clk,
    rest,
    PWM_Signal,
    TX,
    RX,
    input_port_data,
    Output_port_data
);


input clk;
input rest;
output PWM_Signal;
reg PWM_Signal;
output TX;
reg TX;
input RX;
input [7:0] input_port_data;
output [7:0] Output_port_data;
wire [7:0] Output_port_data;

reg [3:0] STB_O = 0;
reg WE_O = 0;
reg [8:0] DEC_STB_O = 0;
reg [31:0] MST_DAT_I = 0;
wire [31:0] MST_DAT_O;
reg [31:0] SLV_DAT_I = 0;
wire [31:0] ALU_OUTPUT_ADDR_I;
reg [8:0] ADDR_O = 0;
reg WE_I = 0;
reg RST_O = 0;
reg CLK_O = 0;
reg [31:0] SBA_CPU0_current_pc = 0;
wire [31:0] SBA_CPU0_instruction;
reg [6:0] SBA_CPU0_opcode = 0;
reg [4:0] SBA_CPU0_rdaddress = 0;
reg [4:0] SBA_CPU0_rs1address = 0;
reg [4:0] SBA_CPU0_rs2address = 0;
reg [19:0] SBA_CPU0_imm = 0;
reg [2:0] SBA_CPU0_funct3 = 0;
reg [6:0] SBA_CPU0_funct7 = 0;
reg SBA_CPU0_zero = 0;
wire [31:0] SBA_CPU0_rs1out;
reg [5:0] SBA_CPU0_ALUop = 0;
reg SBA_CPU0_regWrite = 0;
reg SBA_CPU0_branch = 0;
reg SBA_CPU0_ALUsrc = 0;
reg SBA_CPU0_dataSrc = 0;
reg [31:0] SBA_CPU0_operand2 = 0;
reg [31:0] SBA_CPU0_next_pc = 0;
reg [31:0] SBA_CPU0_write_back_data = 0;
wire [31:0] SBA_CPU0_branch_adder_result;
wire [31:0] SBA_CPU0_pc_adder_result;
reg [31:0] SBA_CPU0_imm_extended = 0;
wire SBA_CPU0_branch_taken;
wire SBA_CPU0_empty;
reg [31:0] SBA_CPU0_result = 0;
wire [31:0] SBA_CPU0_rs2out;
wire [31:0] SBA_CPU0_ROM0_ADDR;
wire [7:0] SBA_CPU0_ROM0_DATA_OUT_1;
wire [7:0] SBA_CPU0_ROM0_DATA_OUT_2;
wire [7:0] SBA_CPU0_ROM0_DATA_OUT_3;
wire [7:0] SBA_CPU0_ROM0_DATA_OUT_4;
reg [63:0] SBA_CPU0_ALU0_temp = 0;
reg [31:0] BusSystem0_SLV_DAT_O_1 = 0;
wire [31:0] BusSystem0_SLV_DAT_O_3;
reg [31:0] BusSystem0_SLV_DAT_O_4 = 0;
reg [31:0] BusSystem0_SLV_DAT_O_5 = 0;
reg [31:0] BusSystem0_SLV_DAT_O_6 = 0;
reg [3:0] BusSystem0_STB_O_1 = 0;
reg [3:0] BusSystem0_STB_O_2 = 0;
reg [3:0] BusSystem0_STB_O_3 = 0;
reg [3:0] BusSystem0_STB_O_4 = 0;
reg [3:0] BusSystem0_STB_O_5 = 0;
reg [3:0] BusSystem0_STB_O_6 = 0;
reg [7:0] SBA_RAM0_WR_DATA_OUT_1 = 0;
reg [7:0] SBA_RAM0_WR_DATA_OUT_2 = 0;
reg [7:0] SBA_RAM0_WR_DATA_OUT_3 = 0;
reg [7:0] SBA_RAM0_WR_DATA_OUT_4 = 0;
wire [11:0] SBA_RAM0_Sliced_Address;
reg [7:0] SBA_RAM0_MEM_DATA_OUT_1 = 0;
reg [7:0] SBA_RAM0_MEM_DATA_OUT_2 = 0;
reg [7:0] SBA_RAM0_MEM_DATA_OUT_3 = 0;
reg [7:0] SBA_RAM0_MEM_DATA_OUT_4 = 0;
reg [7:0] output_port0_EightBitReg0_data = 0;
reg SBA_PWM0_load_comp = 0;
reg SBA_PWM0_loadCNT = 0;
reg SBA_PWM0_EN_CNT = 0;
reg SBA_PWM0_is_zero = 0;
wire [15:0] SBA_PWM0_DataPath0_COMP0_out;
wire [15:0] SBA_PWM0_DataPath0_COMP1_out;
wire [15:0] SBA_PWM0_DataPath0_CNT_out;
reg [15:0] SBA_PWM0_DataPath0_active = 0;
wire SBA_PWM0_DataPath0_load_enable;
reg [15:0] SBA_PWM0_DataPath0_period = 0;
reg [15:0] SBA_PWM0_DataPath0_REG_16bit0_storage = 0;
reg [15:0] SBA_PWM0_DataPath0_REG_16bit1_storage = 0;
reg [15:0] SBA_PWM0_DataPath0_CountDown_REG0_value = 0;
wire SBA_PWM0_ControlUnit0_D_edge;
reg [1:0] SBA_PWM0_ControlUnit0_R_edge = 0;
reg [0:0] SBA_PWM0_ControlUnit0_state = 0;
reg [7:0] SBA_TIMER0_base_reg = 0;
reg SBA_TIMER0_count_enable = 0;
reg [7:0] SBA_TIMER0_counter = 0;
wire SBA_TIMER0_enable;
reg SBA_TIMER0_next_state = 0;
wire SBA_TIMER0_start;
reg SBA_TIMER0_state = 0;
wire SBA_TIMER0_stop;
reg [15:0] SBA_UART_SYS0_baud_rate = 0;
reg [7:0] SBA_UART_SYS0_TxData = 0;
reg [7:0] SBA_UART_SYS0_RxData = 0;
reg SBA_UART_SYS0_TxEn = 0;
reg SBA_UART_SYS0_RxEn = 0;
reg SBA_UART_SYS0_TxDone = 0;
reg SBA_UART_SYS0_RxDone = 0;
reg SBA_UART_SYS0_BRG_En = 0;
reg SBA_UART_SYS0_RxFlag = 0;
reg SBA_UART_SYS0_TxFlag = 0;
reg [7:0] SBA_UART_SYS0_UART_DAT_OUT = 0;
wire SBA_UART_SYS0_UART0_tick;
wire [3:0] SBA_UART_SYS0_UART0_Nbits;
reg [4:0] SBA_UART_SYS0_UART0_RX0_Bit = 0;
reg [7:0] SBA_UART_SYS0_UART0_RX0_Read_data = 0;
reg [3:0] SBA_UART_SYS0_UART0_RX0_counter = 0;
reg [1:0] SBA_UART_SYS0_UART0_RX0_next_state = 0;
reg SBA_UART_SYS0_UART0_RX0_read_enable = 0;
reg SBA_UART_SYS0_UART0_RX0_start_bit = 1;
reg [1:0] SBA_UART_SYS0_UART0_RX0_state = 0;
reg [4:0] SBA_UART_SYS0_UART0_TX0_Bit = 0;
wire SBA_UART_SYS0_UART0_TX0_D_edge;
reg [1:0] SBA_UART_SYS0_UART0_TX0_R_edge = 0;
reg [3:0] SBA_UART_SYS0_UART0_TX0_counter = 0;
reg [7:0] SBA_UART_SYS0_UART0_TX0_in_data = 0;
reg SBA_UART_SYS0_UART0_TX0_next_state = 0;
reg SBA_UART_SYS0_UART0_TX0_start_bit = 1;
reg SBA_UART_SYS0_UART0_TX0_state = 0;
reg SBA_UART_SYS0_UART0_TX0_stop_bit = 0;
reg SBA_UART_SYS0_UART0_TX0_write_enable = 0;
wire SBA_UART_SYS0_UART0_BRG0_D_edge;
reg [1:0] SBA_UART_SYS0_UART0_BRG0_R_edge = 0;
reg [31:0] SBA_UART_SYS0_UART0_BRG0_baudRateReg = 0;
reg [7:0] SBA_CPU0_ROM0_Memory_block0_MemoryBank0_memory [0:32-1];

initial begin: INITIALIZE_SBA_CPU0_ROM0_MEMORY_BLOCK0_MEMORYBANK0_MEMORY
    integer i;
    for(i=0; i<32; i=i+1) begin
        SBA_CPU0_ROM0_Memory_block0_MemoryBank0_memory[i] = 0;
    end
end

reg [7:0] SBA_CPU0_ROM0_Memory_block0_MemoryBank1_memory [0:32-1];

initial begin: INITIALIZE_SBA_CPU0_ROM0_MEMORY_BLOCK0_MEMORYBANK1_MEMORY
    integer i;
    for(i=0; i<32; i=i+1) begin
        SBA_CPU0_ROM0_Memory_block0_MemoryBank1_memory[i] = 0;
    end
end

reg [7:0] SBA_CPU0_ROM0_Memory_block0_MemoryBank2_memory [0:32-1];

initial begin: INITIALIZE_SBA_CPU0_ROM0_MEMORY_BLOCK0_MEMORYBANK2_MEMORY
    integer i;
    for(i=0; i<32; i=i+1) begin
        SBA_CPU0_ROM0_Memory_block0_MemoryBank2_memory[i] = 0;
    end
end

reg [7:0] SBA_CPU0_ROM0_Memory_block0_MemoryBank3_memory [0:32-1];

initial begin: INITIALIZE_SBA_CPU0_ROM0_MEMORY_BLOCK0_MEMORYBANK3_MEMORY
    integer i;
    for(i=0; i<32; i=i+1) begin
        SBA_CPU0_ROM0_Memory_block0_MemoryBank3_memory[i] = 0;
    end
end

reg signed [31:0] SBA_CPU0_file_register0_register [0:32-1];

initial begin: INITIALIZE_SBA_CPU0_FILE_REGISTER0_REGISTER
    integer i;
    for(i=0; i<32; i=i+1) begin
        SBA_CPU0_file_register0_register[i] = 0;
    end
end

reg [7:0] SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory [0:32-1];

initial begin: INITIALIZE_SBA_RAM0_MEMORY_BLOCK0_0_MEMORYBANK0_0_MEMORY
    integer i;
    for(i=0; i<32; i=i+1) begin
        SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[i] = 0;
    end
end

reg [7:0] SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory [0:32-1];

initial begin: INITIALIZE_SBA_RAM0_MEMORY_BLOCK0_0_MEMORYBANK1_0_MEMORY
    integer i;
    for(i=0; i<32; i=i+1) begin
        SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[i] = 0;
    end
end

reg [7:0] SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory [0:32-1];

initial begin: INITIALIZE_SBA_RAM0_MEMORY_BLOCK0_0_MEMORYBANK2_0_MEMORY
    integer i;
    for(i=0; i<32; i=i+1) begin
        SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[i] = 0;
    end
end

reg [7:0] SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory [0:32-1];

initial begin: INITIALIZE_SBA_RAM0_MEMORY_BLOCK0_0_MEMORYBANK3_0_MEMORY
    integer i;
    for(i=0; i<32; i=i+1) begin
        SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[i] = 0;
    end
end


assign SBA_CPU0_empty = 1'd0;
assign BusSystem0_SLV_DAT_O_3 = 32'd0;
assign SBA_UART_SYS0_UART0_Nbits = 4'd8;


always @(posedge clk) begin: MICROCONTROLLER_SBA_CPU0_PC0_SEQ
    SBA_CPU0_current_pc <= SBA_CPU0_next_pc;
end



assign SBA_CPU0_ROM0_ADDR = (SBA_CPU0_current_pc >>> 2);



assign SBA_CPU0_ROM0_DATA_OUT_1 = SBA_CPU0_ROM0_Memory_block0_MemoryBank0_memory[SBA_CPU0_ROM0_ADDR];


always @(posedge SBA_CPU0_empty) begin: MICROCONTROLLER_SBA_CPU0_ROM0_MEMORY_BLOCK0_MEMORYBANK0_WRITE
    SBA_CPU0_ROM0_Memory_block0_MemoryBank0_memory[SBA_CPU0_ROM0_ADDR] <= SBA_CPU0_empty;
end



assign SBA_CPU0_ROM0_DATA_OUT_2 = SBA_CPU0_ROM0_Memory_block0_MemoryBank1_memory[SBA_CPU0_ROM0_ADDR];


always @(posedge SBA_CPU0_empty) begin: MICROCONTROLLER_SBA_CPU0_ROM0_MEMORY_BLOCK0_MEMORYBANK1_WRITE
    SBA_CPU0_ROM0_Memory_block0_MemoryBank1_memory[SBA_CPU0_ROM0_ADDR] <= SBA_CPU0_empty;
end



assign SBA_CPU0_ROM0_DATA_OUT_3 = SBA_CPU0_ROM0_Memory_block0_MemoryBank2_memory[SBA_CPU0_ROM0_ADDR];


always @(posedge SBA_CPU0_empty) begin: MICROCONTROLLER_SBA_CPU0_ROM0_MEMORY_BLOCK0_MEMORYBANK2_WRITE
    SBA_CPU0_ROM0_Memory_block0_MemoryBank2_memory[SBA_CPU0_ROM0_ADDR] <= SBA_CPU0_empty;
end



assign SBA_CPU0_ROM0_DATA_OUT_4 = SBA_CPU0_ROM0_Memory_block0_MemoryBank3_memory[SBA_CPU0_ROM0_ADDR];


always @(posedge SBA_CPU0_empty) begin: MICROCONTROLLER_SBA_CPU0_ROM0_MEMORY_BLOCK0_MEMORYBANK3_WRITE
    SBA_CPU0_ROM0_Memory_block0_MemoryBank3_memory[SBA_CPU0_ROM0_ADDR] <= SBA_CPU0_empty;
end



assign SBA_CPU0_instruction = {SBA_CPU0_ROM0_DATA_OUT_4, SBA_CPU0_ROM0_DATA_OUT_3, SBA_CPU0_ROM0_DATA_OUT_2, SBA_CPU0_ROM0_DATA_OUT_1};


always @(SBA_CPU0_instruction) begin: MICROCONTROLLER_SBA_CPU0_DECODER0_DECODE
    SBA_CPU0_opcode = SBA_CPU0_instruction[7-1:0];
    SBA_CPU0_funct3 = SBA_CPU0_instruction[15-1:12];
    SBA_CPU0_funct7 = SBA_CPU0_instruction[32-1:25];
    if ((SBA_CPU0_instruction[7-1:0] == 51)) begin
        SBA_CPU0_rdaddress = SBA_CPU0_instruction[12-1:7];
        SBA_CPU0_rs1address = SBA_CPU0_instruction[20-1:15];
        SBA_CPU0_rs2address = SBA_CPU0_instruction[25-1:20];
        SBA_CPU0_imm = 0;
    end
    else if (((SBA_CPU0_instruction[7-1:0] == 3) || (SBA_CPU0_instruction[7-1:0] == 19) || (SBA_CPU0_instruction[7-1:0] == 103))) begin
        SBA_CPU0_rdaddress = SBA_CPU0_instruction[12-1:7];
        SBA_CPU0_rs1address = SBA_CPU0_instruction[20-1:15];
        SBA_CPU0_rs2address = 0;
        if (((SBA_CPU0_instruction[15-1:12] == 1) || (SBA_CPU0_instruction[15-1:12] == 5))) begin
            SBA_CPU0_imm = SBA_CPU0_instruction[26-1:20];
        end
        else begin
            SBA_CPU0_imm = SBA_CPU0_instruction[32-1:20];
        end
    end
    else if ((SBA_CPU0_instruction[7-1:0] == 35)) begin
        SBA_CPU0_rdaddress = 0;
        SBA_CPU0_rs1address = SBA_CPU0_instruction[20-1:15];
        SBA_CPU0_rs2address = SBA_CPU0_instruction[25-1:20];
        SBA_CPU0_imm = $signed({SBA_CPU0_instruction[32-1:25], SBA_CPU0_instruction[12-1:7]});
    end
    else if ((SBA_CPU0_instruction[7-1:0] == 99)) begin
        SBA_CPU0_rdaddress = 0;
        SBA_CPU0_rs1address = SBA_CPU0_instruction[20-1:15];
        SBA_CPU0_rs2address = SBA_CPU0_instruction[25-1:20];
        SBA_CPU0_imm = $signed({SBA_CPU0_instruction[32-1:31], SBA_CPU0_instruction[8-1:7], SBA_CPU0_instruction[31-1:25], SBA_CPU0_instruction[12-1:8]});
    end
    else if (((SBA_CPU0_instruction[7-1:0] == 55) || (SBA_CPU0_instruction[7-1:0] == 23))) begin
        SBA_CPU0_rdaddress = SBA_CPU0_instruction[12-1:7];
        SBA_CPU0_rs1address = 0;
        SBA_CPU0_rs2address = 0;
        SBA_CPU0_imm = $signed(SBA_CPU0_instruction[32-1:12]);
    end
    else if ((SBA_CPU0_instruction[7-1:0] == 111)) begin
        SBA_CPU0_rdaddress = SBA_CPU0_instruction[12-1:7];
        SBA_CPU0_rs1address = 0;
        SBA_CPU0_rs2address = 0;
        SBA_CPU0_imm = $signed({SBA_CPU0_instruction[32-1:31], SBA_CPU0_instruction[20-1:12], SBA_CPU0_instruction[21-1:20], SBA_CPU0_instruction[31-1:21]});
    end
    else if ((SBA_CPU0_instruction[7-1:0] == 0)) begin
        SBA_CPU0_rdaddress = 0;
        SBA_CPU0_rs1address = 0;
        SBA_CPU0_rs2address = 0;
        SBA_CPU0_imm = 0;
    end
end


always @(posedge clk) begin: MICROCONTROLLER_SBA_CPU0_FILE_REGISTER0_REGISTERUPDATE
    if ((SBA_CPU0_regWrite == 1)) begin
        SBA_CPU0_file_register0_register[SBA_CPU0_rdaddress] <= SBA_CPU0_write_back_data;
    end
end



assign SBA_CPU0_rs1out = SBA_CPU0_file_register0_register[SBA_CPU0_rs1address];
assign SBA_CPU0_rs2out = SBA_CPU0_file_register0_register[SBA_CPU0_rs2address];


always @(SBA_CPU0_opcode, SBA_CPU0_funct7, SBA_CPU0_funct3) begin: MICROCONTROLLER_SBA_CPU0_SBA_CU0_CONTROL_SYSTEM
    if ((SBA_CPU0_opcode == 51)) begin
        SBA_CPU0_branch = 0;
        WE_O = 0;
        SBA_CPU0_regWrite = 1;
        SBA_CPU0_ALUsrc = 0;
        SBA_CPU0_dataSrc = 0;
        STB_O = 0;
        if (((SBA_CPU0_funct3 == 0) && (SBA_CPU0_funct7 == 0))) begin
            SBA_CPU0_ALUop = 21;
        end
        else if (((SBA_CPU0_funct3 == 0) && (SBA_CPU0_funct7 == 32))) begin
            SBA_CPU0_ALUop = 22;
        end
        else if (((SBA_CPU0_funct3 == 1) && (SBA_CPU0_funct7 == 0))) begin
            SBA_CPU0_ALUop = 18;
        end
        else if (((SBA_CPU0_funct3 == 2) && (SBA_CPU0_funct7 == 0))) begin
            SBA_CPU0_ALUop = 26;
        end
        else if (((SBA_CPU0_funct3 == 3) && (SBA_CPU0_funct7 == 0))) begin
            SBA_CPU0_ALUop = 27;
        end
        else if (((SBA_CPU0_funct3 == 4) && (SBA_CPU0_funct7 == 0))) begin
            SBA_CPU0_ALUop = 23;
        end
        else if (((SBA_CPU0_funct3 == 5) && (SBA_CPU0_funct7 == 0))) begin
            SBA_CPU0_ALUop = 19;
        end
        else if (((SBA_CPU0_funct3 == 5) && (SBA_CPU0_funct7 == 32))) begin
            SBA_CPU0_ALUop = 20;
        end
        else if (((SBA_CPU0_funct3 == 6) && (SBA_CPU0_funct7 == 0))) begin
            SBA_CPU0_ALUop = 24;
        end
        else if (((SBA_CPU0_funct3 == 7) && (SBA_CPU0_funct7 == 0))) begin
            SBA_CPU0_ALUop = 25;
        end
        else if (((SBA_CPU0_funct3 == 0) && (SBA_CPU0_funct7 == 1))) begin
            SBA_CPU0_ALUop = 28;
        end
        else if (((SBA_CPU0_funct3 == 1) && (SBA_CPU0_funct7 == 1))) begin
            SBA_CPU0_ALUop = 29;
        end
        else if (((SBA_CPU0_funct3 == 2) && (SBA_CPU0_funct7 == 1))) begin
            SBA_CPU0_ALUop = 30;
        end
        else if (((SBA_CPU0_funct3 == 3) && (SBA_CPU0_funct7 == 1))) begin
            SBA_CPU0_ALUop = 31;
        end
        else if (((SBA_CPU0_funct3 == 4) && (SBA_CPU0_funct7 == 1))) begin
            SBA_CPU0_ALUop = 32;
        end
        else if (((SBA_CPU0_funct3 == 5) && (SBA_CPU0_funct7 == 1))) begin
            SBA_CPU0_ALUop = 33;
        end
        else if (((SBA_CPU0_funct3 == 6) && (SBA_CPU0_funct7 == 1))) begin
            SBA_CPU0_ALUop = 34;
        end
        else if (((SBA_CPU0_funct3 == 7) && (SBA_CPU0_funct7 == 1))) begin
            SBA_CPU0_ALUop = 35;
        end
    end
    else if ((SBA_CPU0_opcode == 3)) begin
        SBA_CPU0_branch = 0;
        WE_O = 0;
        SBA_CPU0_regWrite = 1;
        SBA_CPU0_ALUsrc = 1;
        SBA_CPU0_dataSrc = 1;
        STB_O = {SBA_CPU0_funct3, 1'b1};
        case (SBA_CPU0_funct3)
            'h0: begin
                SBA_CPU0_ALUop = 0;
            end
            'h1: begin
                SBA_CPU0_ALUop = 1;
            end
            'h2: begin
                SBA_CPU0_ALUop = 2;
            end
            'h4: begin
                SBA_CPU0_ALUop = 3;
            end
            'h5: begin
                SBA_CPU0_ALUop = 4;
            end
        endcase
    end
    else if ((SBA_CPU0_opcode == 19)) begin
        SBA_CPU0_branch = 0;
        WE_O = 0;
        SBA_CPU0_regWrite = 1;
        SBA_CPU0_ALUsrc = 1;
        SBA_CPU0_dataSrc = 0;
        STB_O = 0;
        case (SBA_CPU0_funct3)
            'h0: begin
                SBA_CPU0_ALUop = 8;
            end
            'h1: begin
                SBA_CPU0_ALUop = 5;
            end
            'h2: begin
                SBA_CPU0_ALUop = 12;
            end
            'h3: begin
                SBA_CPU0_ALUop = 13;
            end
            'h4: begin
                SBA_CPU0_ALUop = 9;
            end
            'h5: begin
                case (SBA_CPU0_funct7)
                    'h0: begin
                        SBA_CPU0_ALUop = 6;
                    end
                    'h20: begin
                        SBA_CPU0_ALUop = 7;
                    end
                endcase
            end
            'h6: begin
                SBA_CPU0_ALUop = 10;
            end
            'h7: begin
                SBA_CPU0_ALUop = 11;
            end
        endcase
    end
    else if ((SBA_CPU0_opcode == 103)) begin
        SBA_CPU0_branch = 1;
        WE_O = 0;
        SBA_CPU0_regWrite = 0;
        SBA_CPU0_ALUsrc = 0;
        SBA_CPU0_dataSrc = 0;
        SBA_CPU0_ALUop = 14;
        STB_O = 0;
    end
    else if ((SBA_CPU0_opcode == 35)) begin
        SBA_CPU0_branch = 0;
        WE_O = 1;
        SBA_CPU0_regWrite = 0;
        SBA_CPU0_ALUsrc = 1;
        SBA_CPU0_dataSrc = 0;
        STB_O = {SBA_CPU0_funct3, 1'b1};
        case (SBA_CPU0_funct3)
            'h0: begin
                SBA_CPU0_ALUop = 15;
            end
            'h1: begin
                SBA_CPU0_ALUop = 16;
            end
            'h2: begin
                SBA_CPU0_ALUop = 17;
            end
        endcase
    end
    else if ((SBA_CPU0_opcode == 99)) begin
        SBA_CPU0_branch = 1;
        WE_O = 0;
        SBA_CPU0_regWrite = 0;
        SBA_CPU0_ALUsrc = 0;
        SBA_CPU0_dataSrc = 0;
        STB_O = 0;
        case (SBA_CPU0_funct3)
            'h0: begin
                SBA_CPU0_ALUop = 39;
            end
            'h1: begin
                SBA_CPU0_ALUop = 40;
            end
            'h4: begin
                SBA_CPU0_ALUop = 41;
            end
            'h5: begin
                SBA_CPU0_ALUop = 42;
            end
            'h6: begin
                SBA_CPU0_ALUop = 43;
            end
            'h7: begin
                SBA_CPU0_ALUop = 44;
            end
        endcase
    end
    else if (((SBA_CPU0_opcode == 55) || (SBA_CPU0_opcode == 23))) begin
        WE_O = 0;
        case (SBA_CPU0_opcode)
            'h37: begin
                SBA_CPU0_branch = 0;
                SBA_CPU0_regWrite = 1;
                SBA_CPU0_ALUsrc = 1;
                SBA_CPU0_dataSrc = 1;
                SBA_CPU0_ALUop = 36;
                STB_O = {SBA_CPU0_funct3, 1'b1};
            end
            'h17: begin
                SBA_CPU0_branch = 1;
                SBA_CPU0_regWrite = 0;
                SBA_CPU0_ALUsrc = 1;
                SBA_CPU0_dataSrc = 0;
                SBA_CPU0_ALUop = 37;
                STB_O = 0;
            end
        endcase
    end
    else if ((SBA_CPU0_opcode == 111)) begin
        SBA_CPU0_branch = 1;
        WE_O = 0;
        SBA_CPU0_regWrite = 1;
        SBA_CPU0_ALUsrc = 0;
        SBA_CPU0_dataSrc = 0;
        SBA_CPU0_ALUop = 38;
        STB_O = 0;
    end
    else if ((SBA_CPU0_opcode == 0)) begin
        SBA_CPU0_branch = 0;
        WE_O = 0;
        SBA_CPU0_regWrite = 0;
        SBA_CPU0_ALUsrc = 0;
        SBA_CPU0_dataSrc = 0;
        STB_O = 0;
    end
end


always @(SBA_CPU0_current_pc, SBA_CPU0_rs1out, SBA_CPU0_operand2, SBA_CPU0_ALUop) begin: MICROCONTROLLER_SBA_CPU0_ALU0_MULTIPLICATION
    case (SBA_CPU0_ALUop)
        'h1c: begin
            SBA_CPU0_ALU0_temp <= (SBA_CPU0_rs1out * SBA_CPU0_operand2);
        end
        'h1d: begin
            SBA_CPU0_ALU0_temp <= (SBA_CPU0_rs1out * SBA_CPU0_operand2);
        end
        'h1e: begin
            SBA_CPU0_ALU0_temp <= (SBA_CPU0_rs1out * SBA_CPU0_operand2[32-1:0]);
        end
        'h1f: begin
            SBA_CPU0_ALU0_temp <= (SBA_CPU0_rs1out[32-1:0] * SBA_CPU0_operand2[32-1:0]);
        end
        default: begin
            SBA_CPU0_ALU0_temp <= 0;
        end
    endcase
end


always @(SBA_CPU0_operand2, SBA_CPU0_ALUop, SBA_CPU0_rs1out, SBA_CPU0_current_pc, SBA_CPU0_ALU0_temp) begin: MICROCONTROLLER_SBA_CPU0_ALU0_ALU_CALCULATION
    if ((SBA_CPU0_ALUop == 0)) begin
        SBA_CPU0_result = (SBA_CPU0_rs1out + SBA_CPU0_operand2);
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 1)) begin
        SBA_CPU0_result = (SBA_CPU0_rs1out + SBA_CPU0_operand2);
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 2)) begin
        SBA_CPU0_result = (SBA_CPU0_rs1out + SBA_CPU0_operand2);
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 3)) begin
        SBA_CPU0_result = (SBA_CPU0_rs1out + SBA_CPU0_operand2);
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 4)) begin
        SBA_CPU0_result = (SBA_CPU0_rs1out + SBA_CPU0_operand2);
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 5)) begin
        SBA_CPU0_result = (SBA_CPU0_rs1out << SBA_CPU0_operand2);
    end
    else if ((SBA_CPU0_ALUop == 6)) begin
        SBA_CPU0_result = (SBA_CPU0_rs1out >>> SBA_CPU0_operand2);
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 7)) begin
        SBA_CPU0_result = (SBA_CPU0_rs1out >>> SBA_CPU0_operand2);
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 8)) begin
        SBA_CPU0_result = (SBA_CPU0_rs1out + SBA_CPU0_operand2);
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 9)) begin
        SBA_CPU0_result = (SBA_CPU0_rs1out ^ SBA_CPU0_operand2);
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 10)) begin
        SBA_CPU0_result = (SBA_CPU0_rs1out | SBA_CPU0_operand2);
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 11)) begin
        SBA_CPU0_result = (SBA_CPU0_rs1out & SBA_CPU0_operand2);
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 12)) begin
        if ((SBA_CPU0_rs1out < SBA_CPU0_operand2)) begin
            SBA_CPU0_result = 1;
            SBA_CPU0_zero = 0;
        end
        else begin
            SBA_CPU0_result = 0;
            SBA_CPU0_zero = 0;
        end
    end
    else if ((SBA_CPU0_ALUop == 13)) begin
        if (({1'b0, SBA_CPU0_rs1out[31-1:0]} < {1'b0, SBA_CPU0_operand2[31-1:0]})) begin
            SBA_CPU0_result = 1;
            SBA_CPU0_zero = 0;
        end
        else begin
            SBA_CPU0_result = 0;
            SBA_CPU0_zero = 0;
        end
    end
    else if ((SBA_CPU0_ALUop == 14)) begin
        SBA_CPU0_result = (SBA_CPU0_rs1out + SBA_CPU0_operand2);
        SBA_CPU0_zero = 1;
    end
    else if ((SBA_CPU0_ALUop == 38)) begin
        SBA_CPU0_result = (SBA_CPU0_current_pc + SBA_CPU0_operand2);
        SBA_CPU0_zero = 1;
    end
    else if ((SBA_CPU0_ALUop == 15)) begin
        SBA_CPU0_result = (SBA_CPU0_rs1out + SBA_CPU0_operand2);
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 16)) begin
        SBA_CPU0_result = (SBA_CPU0_rs1out + SBA_CPU0_operand2);
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 17)) begin
        SBA_CPU0_result = (SBA_CPU0_rs1out + SBA_CPU0_operand2);
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 18)) begin
        SBA_CPU0_result = (SBA_CPU0_rs1out << SBA_CPU0_operand2[32-1:0]);
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 19)) begin
        SBA_CPU0_result = (SBA_CPU0_rs1out >>> SBA_CPU0_operand2[32-1:0]);
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 20)) begin
        SBA_CPU0_result = ((SBA_CPU0_rs1out >>> SBA_CPU0_operand2[32-1:0]) | ($signed({1'b0, SBA_CPU0_rs1out}) << (32 - $signed({1'b0, SBA_CPU0_operand2[32-1:0]}))));
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 21)) begin
        SBA_CPU0_result = (SBA_CPU0_rs1out + SBA_CPU0_operand2);
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 22)) begin
        SBA_CPU0_result = (SBA_CPU0_rs1out - SBA_CPU0_operand2);
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 23)) begin
        SBA_CPU0_result = (SBA_CPU0_rs1out ^ SBA_CPU0_operand2);
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 24)) begin
        SBA_CPU0_result = (SBA_CPU0_rs1out | SBA_CPU0_operand2);
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 25)) begin
        SBA_CPU0_result = (SBA_CPU0_rs1out & SBA_CPU0_operand2);
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 26)) begin
        if ((SBA_CPU0_rs1out < SBA_CPU0_operand2)) begin
            SBA_CPU0_result = 1;
            SBA_CPU0_zero = 0;
        end
        else begin
            SBA_CPU0_result = 0;
            SBA_CPU0_zero = 0;
        end
    end
    else if ((SBA_CPU0_ALUop == 27)) begin
        if (({1'b0, SBA_CPU0_rs1out[31-1:0]} < {1'b0, SBA_CPU0_operand2[31-1:0]})) begin
            SBA_CPU0_result = 1;
            SBA_CPU0_zero = 0;
        end
        else begin
            SBA_CPU0_result = 0;
            SBA_CPU0_zero = 0;
        end
    end
    else if ((SBA_CPU0_ALUop == 28)) begin
        SBA_CPU0_result = SBA_CPU0_ALU0_temp[32-1:0];
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 29)) begin
        SBA_CPU0_result = SBA_CPU0_ALU0_temp[64-1:32];
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 30)) begin
        SBA_CPU0_result = SBA_CPU0_ALU0_temp[64-1:32];
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 31)) begin
        SBA_CPU0_result = SBA_CPU0_ALU0_temp[64-1:32];
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 32)) begin
        SBA_CPU0_result = (SBA_CPU0_rs1out / SBA_CPU0_operand2);
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 33)) begin
        SBA_CPU0_result = (SBA_CPU0_rs1out[32-1:0] / SBA_CPU0_operand2[32-1:0]);
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 34)) begin
        SBA_CPU0_result = (SBA_CPU0_rs1out % SBA_CPU0_operand2);
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 35)) begin
        SBA_CPU0_result = (SBA_CPU0_rs1out[32-1:0] % SBA_CPU0_operand2[32-1:0]);
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 36)) begin
        SBA_CPU0_result = (SBA_CPU0_operand2 << 12);
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 37)) begin
        SBA_CPU0_result = (SBA_CPU0_current_pc + (SBA_CPU0_operand2 << 12));
        SBA_CPU0_zero = 0;
    end
    else if ((SBA_CPU0_ALUop == 39)) begin
        if ((SBA_CPU0_rs1out == SBA_CPU0_operand2)) begin
            SBA_CPU0_zero = 1;
            SBA_CPU0_result = 0;
        end
        else begin
            SBA_CPU0_zero = 0;
            SBA_CPU0_result = 0;
        end
    end
    else if ((SBA_CPU0_ALUop == 40)) begin
        if ((SBA_CPU0_rs1out != SBA_CPU0_operand2)) begin
            SBA_CPU0_zero = 1;
            SBA_CPU0_result = 0;
        end
        else begin
            SBA_CPU0_zero = 0;
            SBA_CPU0_result = 0;
        end
    end
    else if ((SBA_CPU0_ALUop == 41)) begin
        if ((SBA_CPU0_rs1out < SBA_CPU0_operand2)) begin
            SBA_CPU0_zero = 1;
            SBA_CPU0_result = 0;
        end
        else begin
            SBA_CPU0_zero = 0;
            SBA_CPU0_result = 0;
        end
    end
    else if ((SBA_CPU0_ALUop == 42)) begin
        if ((SBA_CPU0_rs1out >= SBA_CPU0_operand2)) begin
            SBA_CPU0_zero = 1;
            SBA_CPU0_result = 0;
        end
        else begin
            SBA_CPU0_zero = 0;
            SBA_CPU0_result = 0;
        end
    end
    else if ((SBA_CPU0_ALUop == 43)) begin
        if ((SBA_CPU0_rs1out[32-1:0] < SBA_CPU0_operand2[32-1:0])) begin
            SBA_CPU0_zero = 1;
            SBA_CPU0_result = 0;
        end
        else begin
            SBA_CPU0_zero = 0;
            SBA_CPU0_result = 0;
        end
    end
    else if ((SBA_CPU0_ALUop >= 44)) begin
        if ((SBA_CPU0_rs1out[32-1:0] == SBA_CPU0_operand2[32-1:0])) begin
            SBA_CPU0_zero = 1;
            SBA_CPU0_result = 0;
        end
        else begin
            SBA_CPU0_zero = 0;
            SBA_CPU0_result = 0;
        end
    end
end


always @(SBA_CPU0_opcode, SBA_CPU0_imm) begin: MICROCONTROLLER_SBA_CPU0_IMM_GENERATOR0_EXTEND
    if (((3 == SBA_CPU0_opcode) || (SBA_CPU0_opcode == 19) || (SBA_CPU0_opcode == 103) || (SBA_CPU0_opcode == 35) || (SBA_CPU0_opcode == 99))) begin
        SBA_CPU0_imm_extended = $signed(SBA_CPU0_imm[20-1:0]);
    end
    else if (((SBA_CPU0_opcode == 55) || (SBA_CPU0_opcode == 23) || (SBA_CPU0_opcode == 111))) begin
        SBA_CPU0_imm_extended = $signed(SBA_CPU0_imm[20-1:0]);
    end
end



assign SBA_CPU0_branch_adder_result = (SBA_CPU0_current_pc + (SBA_CPU0_imm_extended << 1));



assign SBA_CPU0_pc_adder_result = (SBA_CPU0_current_pc + 4);



assign SBA_CPU0_branch_taken = (SBA_CPU0_branch && SBA_CPU0_zero);


always @(SBA_CPU0_ALUsrc, SBA_CPU0_imm_extended, SBA_CPU0_rs2out) begin: MICROCONTROLLER_SBA_CPU0_MUX0_SELECT
    if ((SBA_CPU0_ALUsrc == 0)) begin
        SBA_CPU0_operand2 = SBA_CPU0_rs2out;
    end
    else begin
        SBA_CPU0_operand2 = SBA_CPU0_imm_extended;
    end
end


always @(SBA_CPU0_dataSrc, MST_DAT_I, SBA_CPU0_result) begin: MICROCONTROLLER_SBA_CPU0_MUX1_SELECT
    if ((SBA_CPU0_dataSrc == 0)) begin
        SBA_CPU0_write_back_data = SBA_CPU0_result;
    end
    else begin
        SBA_CPU0_write_back_data = MST_DAT_I;
    end
end


always @(SBA_CPU0_branch_taken, SBA_CPU0_branch_adder_result, SBA_CPU0_pc_adder_result) begin: MICROCONTROLLER_SBA_CPU0_MUX2_SELECT
    if ((SBA_CPU0_branch_taken == 0)) begin
        SBA_CPU0_next_pc = SBA_CPU0_pc_adder_result;
    end
    else begin
        SBA_CPU0_next_pc = SBA_CPU0_branch_adder_result;
    end
end



assign MST_DAT_O = SBA_CPU0_rs2out;
assign ALU_OUTPUT_ADDR_I = SBA_CPU0_result;


always @(ALU_OUTPUT_ADDR_I, STB_O) begin: MICROCONTROLLER_SBA_DECODER0_DECODE
    if (STB_O[0]) begin
        if ((ALU_OUTPUT_ADDR_I <= 1023)) begin
            DEC_STB_O = {6'h1, STB_O[4-1:1]};
        end
        else if ((ALU_OUTPUT_ADDR_I == 1024)) begin
            DEC_STB_O = {6'h2, STB_O[4-1:1]};
        end
        else if ((ALU_OUTPUT_ADDR_I == 1025)) begin
            DEC_STB_O = {6'h4, STB_O[4-1:1]};
        end
        else if ((ALU_OUTPUT_ADDR_I == 1026)) begin
            DEC_STB_O = {6'h8, STB_O[4-1:1]};
        end
        else if ((ALU_OUTPUT_ADDR_I == 1027)) begin
            DEC_STB_O = {6'h10, 3'h0};
        end
        else if ((ALU_OUTPUT_ADDR_I == 1028)) begin
            DEC_STB_O = {6'h10, 3'h1};
        end
        else if ((ALU_OUTPUT_ADDR_I == 1029)) begin
            DEC_STB_O = {6'h10, 3'h2};
        end
        else if ((ALU_OUTPUT_ADDR_I == 1030)) begin
            DEC_STB_O = {6'h20, STB_O[4-1:1]};
        end
    end
    else begin
        DEC_STB_O = 0;
    end
end


always @(BusSystem0_SLV_DAT_O_1, BusSystem0_SLV_DAT_O_3, BusSystem0_SLV_DAT_O_5, clk, MST_DAT_O, rest, BusSystem0_SLV_DAT_O_4, WE_O, ALU_OUTPUT_ADDR_I, DEC_STB_O, BusSystem0_SLV_DAT_O_6) begin: MICROCONTROLLER_BUSSYSTEM0_BUS
    SLV_DAT_I = MST_DAT_O;
    if (DEC_STB_O[3]) begin
        MST_DAT_I = BusSystem0_SLV_DAT_O_1;
    end
    else if (DEC_STB_O[5]) begin
        MST_DAT_I = BusSystem0_SLV_DAT_O_3;
    end
    else if (DEC_STB_O[6]) begin
        MST_DAT_I = BusSystem0_SLV_DAT_O_4;
    end
    else if (DEC_STB_O[7]) begin
        MST_DAT_I = BusSystem0_SLV_DAT_O_5;
    end
    else if (DEC_STB_O[8]) begin
        MST_DAT_I = BusSystem0_SLV_DAT_O_6;
    end
    ADDR_O = ALU_OUTPUT_ADDR_I[9-1:0];
    CLK_O = clk;
    RST_O = rest;
    BusSystem0_STB_O_1 = {DEC_STB_O[3], DEC_STB_O[3-1:0]};
    BusSystem0_STB_O_2 = {DEC_STB_O[4], DEC_STB_O[3-1:0]};
    BusSystem0_STB_O_3 = {DEC_STB_O[5], DEC_STB_O[3-1:0]};
    BusSystem0_STB_O_4 = {DEC_STB_O[6], DEC_STB_O[3-1:0]};
    BusSystem0_STB_O_5 = {DEC_STB_O[7], DEC_STB_O[3-1:0]};
    BusSystem0_STB_O_6 = {DEC_STB_O[8], DEC_STB_O[3-1:0]};
    WE_I = WE_O;
end



assign SBA_RAM0_Sliced_Address = (ADDR_O >>> 2);


always @(SLV_DAT_I, BusSystem0_STB_O_1, WE_O) begin: MICROCONTROLLER_SBA_RAM0_WRITEDECODER0_DECODEWRITE
    if (WE_O) begin
        if ((BusSystem0_STB_O_1[3-1:0] == 0)) begin
            SBA_RAM0_WR_DATA_OUT_1 = SLV_DAT_I[8-1:0];
            SBA_RAM0_WR_DATA_OUT_2 = 0;
            SBA_RAM0_WR_DATA_OUT_3 = 0;
            SBA_RAM0_WR_DATA_OUT_4 = 0;
        end
        else if ((BusSystem0_STB_O_1[3-1:0] == 1)) begin
            SBA_RAM0_WR_DATA_OUT_1 = SLV_DAT_I[8-1:0];
            SBA_RAM0_WR_DATA_OUT_2 = SLV_DAT_I[16-1:8];
            SBA_RAM0_WR_DATA_OUT_3 = 0;
            SBA_RAM0_WR_DATA_OUT_4 = 0;
        end
        else if ((BusSystem0_STB_O_1[3-1:0] == 2)) begin
            SBA_RAM0_WR_DATA_OUT_1 = SLV_DAT_I[8-1:0];
            SBA_RAM0_WR_DATA_OUT_2 = SLV_DAT_I[16-1:8];
            SBA_RAM0_WR_DATA_OUT_3 = SLV_DAT_I[24-1:16];
            SBA_RAM0_WR_DATA_OUT_4 = SLV_DAT_I[32-1:24];
        end
    end
end


always @(BusSystem0_STB_O_1, WE_O, SBA_RAM0_Sliced_Address, SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[0], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[1], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[2], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[3], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[4], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[5], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[6], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[7], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[8], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[9], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[10], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[11], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[12], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[13], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[14], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[15], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[16], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[17], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[18], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[19], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[20], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[21], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[22], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[23], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[24], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[25], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[26], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[27], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[28], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[29], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[30], SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[31]) begin: MICROCONTROLLER_SBA_RAM0_MEMORY_BLOCK0_0_MEMORYBANK0_0_READ
    if (BusSystem0_STB_O_1[3]) begin
        if ((WE_O == 0)) begin
            SBA_RAM0_MEM_DATA_OUT_1 = SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[SBA_RAM0_Sliced_Address];
        end
    end
end


always @(posedge CLK_O) begin: MICROCONTROLLER_SBA_RAM0_MEMORY_BLOCK0_0_MEMORYBANK0_0_WRITE
    if (BusSystem0_STB_O_1[3]) begin
        if (WE_O) begin
            SBA_RAM0_Memory_block0_0_MemoryBank0_0_memory[SBA_RAM0_Sliced_Address] <= SBA_RAM0_WR_DATA_OUT_1;
        end
    end
end


always @(BusSystem0_STB_O_1, WE_O, SBA_RAM0_Sliced_Address, SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[0], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[1], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[2], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[3], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[4], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[5], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[6], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[7], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[8], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[9], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[10], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[11], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[12], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[13], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[14], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[15], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[16], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[17], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[18], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[19], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[20], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[21], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[22], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[23], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[24], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[25], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[26], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[27], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[28], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[29], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[30], SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[31]) begin: MICROCONTROLLER_SBA_RAM0_MEMORY_BLOCK0_0_MEMORYBANK1_0_READ
    if (BusSystem0_STB_O_1[3]) begin
        if ((WE_O == 0)) begin
            SBA_RAM0_MEM_DATA_OUT_2 = SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[SBA_RAM0_Sliced_Address];
        end
    end
end


always @(posedge CLK_O) begin: MICROCONTROLLER_SBA_RAM0_MEMORY_BLOCK0_0_MEMORYBANK1_0_WRITE
    if (BusSystem0_STB_O_1[3]) begin
        if (WE_O) begin
            SBA_RAM0_Memory_block0_0_MemoryBank1_0_memory[SBA_RAM0_Sliced_Address] <= SBA_RAM0_WR_DATA_OUT_2;
        end
    end
end


always @(BusSystem0_STB_O_1, WE_O, SBA_RAM0_Sliced_Address, SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[0], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[1], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[2], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[3], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[4], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[5], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[6], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[7], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[8], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[9], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[10], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[11], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[12], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[13], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[14], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[15], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[16], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[17], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[18], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[19], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[20], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[21], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[22], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[23], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[24], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[25], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[26], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[27], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[28], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[29], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[30], SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[31]) begin: MICROCONTROLLER_SBA_RAM0_MEMORY_BLOCK0_0_MEMORYBANK2_0_READ
    if (BusSystem0_STB_O_1[3]) begin
        if ((WE_O == 0)) begin
            SBA_RAM0_MEM_DATA_OUT_3 = SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[SBA_RAM0_Sliced_Address];
        end
    end
end


always @(posedge CLK_O) begin: MICROCONTROLLER_SBA_RAM0_MEMORY_BLOCK0_0_MEMORYBANK2_0_WRITE
    if (BusSystem0_STB_O_1[3]) begin
        if (WE_O) begin
            SBA_RAM0_Memory_block0_0_MemoryBank2_0_memory[SBA_RAM0_Sliced_Address] <= SBA_RAM0_WR_DATA_OUT_3;
        end
    end
end


always @(BusSystem0_STB_O_1, WE_O, SBA_RAM0_Sliced_Address, SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[0], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[1], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[2], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[3], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[4], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[5], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[6], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[7], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[8], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[9], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[10], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[11], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[12], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[13], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[14], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[15], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[16], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[17], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[18], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[19], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[20], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[21], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[22], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[23], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[24], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[25], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[26], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[27], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[28], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[29], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[30], SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[31]) begin: MICROCONTROLLER_SBA_RAM0_MEMORY_BLOCK0_0_MEMORYBANK3_0_READ
    if (BusSystem0_STB_O_1[3]) begin
        if ((WE_O == 0)) begin
            SBA_RAM0_MEM_DATA_OUT_4 = SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[SBA_RAM0_Sliced_Address];
        end
    end
end


always @(posedge CLK_O) begin: MICROCONTROLLER_SBA_RAM0_MEMORY_BLOCK0_0_MEMORYBANK3_0_WRITE
    if (BusSystem0_STB_O_1[3]) begin
        if (WE_O) begin
            SBA_RAM0_Memory_block0_0_MemoryBank3_0_memory[SBA_RAM0_Sliced_Address] <= SBA_RAM0_WR_DATA_OUT_4;
        end
    end
end


always @(SBA_RAM0_MEM_DATA_OUT_1, SBA_RAM0_MEM_DATA_OUT_4, SBA_RAM0_MEM_DATA_OUT_3, WE_O, SBA_RAM0_MEM_DATA_OUT_2, BusSystem0_STB_O_1) begin: MICROCONTROLLER_SBA_RAM0_READDECODER0_DECODEREAD
    if ((BusSystem0_STB_O_1[3] == 1)) begin
        if ((WE_O == 0)) begin
            if ((BusSystem0_STB_O_1[3-1:0] == 0)) begin
                if ((SBA_RAM0_MEM_DATA_OUT_1[7] == 0)) begin
                    BusSystem0_SLV_DAT_O_1 = {24'h0, SBA_RAM0_MEM_DATA_OUT_1};
                end
                else if ((SBA_RAM0_MEM_DATA_OUT_1[7] == 1)) begin
                    BusSystem0_SLV_DAT_O_1 = {24'hffffff, SBA_RAM0_MEM_DATA_OUT_1};
                end
            end
            else if ((BusSystem0_STB_O_1[3-1:0] == 1)) begin
                if ((SBA_RAM0_MEM_DATA_OUT_2[7] == 0)) begin
                    BusSystem0_SLV_DAT_O_1 = {16'h0, SBA_RAM0_MEM_DATA_OUT_2, SBA_RAM0_MEM_DATA_OUT_1};
                end
                else if ((SBA_RAM0_MEM_DATA_OUT_2[7] == 1)) begin
                    BusSystem0_SLV_DAT_O_1 = {16'hffff, SBA_RAM0_MEM_DATA_OUT_2, SBA_RAM0_MEM_DATA_OUT_1};
                end
            end
            else if ((BusSystem0_STB_O_1[3-1:0] == 2)) begin
                BusSystem0_SLV_DAT_O_1 = {SBA_RAM0_MEM_DATA_OUT_4, SBA_RAM0_MEM_DATA_OUT_3, SBA_RAM0_MEM_DATA_OUT_2, SBA_RAM0_MEM_DATA_OUT_1};
            end
            else if ((BusSystem0_STB_O_1[3-1:0] == 4)) begin
                BusSystem0_SLV_DAT_O_1 = {24'h0, SBA_RAM0_MEM_DATA_OUT_1};
            end
            else if ((BusSystem0_STB_O_1[3-1:0] == 5)) begin
                BusSystem0_SLV_DAT_O_1 = {16'h0, SBA_RAM0_MEM_DATA_OUT_2, SBA_RAM0_MEM_DATA_OUT_1};
            end
        end
    end
end


always @(posedge CLK_O) begin: MICROCONTROLLER_OUTPUT_PORT0_EIGHTBITREG0_J
    if (BusSystem0_STB_O_2[3]) begin
        output_port0_EightBitReg0_data <= SLV_DAT_I;
    end
end



assign Output_port_data = output_port0_EightBitReg0_data;


always @(posedge CLK_O, posedge RST_O) begin: MICROCONTROLLER_SBA_PWM0_DATAPATH0_REG_16BIT0_REG
    if (RST_O) begin
        SBA_PWM0_DataPath0_REG_16bit0_storage <= 1'b0;
    end
    else begin
        if (SBA_PWM0_load_comp) begin
            SBA_PWM0_DataPath0_REG_16bit0_storage <= SBA_PWM0_DataPath0_period;
        end
    end
end



assign SBA_PWM0_DataPath0_COMP0_out = SBA_PWM0_DataPath0_REG_16bit0_storage;


always @(posedge CLK_O, posedge RST_O) begin: MICROCONTROLLER_SBA_PWM0_DATAPATH0_REG_16BIT1_REG
    if (RST_O) begin
        SBA_PWM0_DataPath0_REG_16bit1_storage <= 1'b0;
    end
    else begin
        if (SBA_PWM0_load_comp) begin
            SBA_PWM0_DataPath0_REG_16bit1_storage <= SBA_PWM0_DataPath0_active;
        end
    end
end



assign SBA_PWM0_DataPath0_COMP1_out = SBA_PWM0_DataPath0_REG_16bit1_storage;



assign SBA_PWM0_DataPath0_CNT_out = SBA_PWM0_DataPath0_CountDown_REG0_value;


always @(posedge CLK_O) begin: MICROCONTROLLER_SBA_PWM0_DATAPATH0_COUNTDOWN_REG0_LD
    if (RST_O) begin
        SBA_PWM0_DataPath0_CountDown_REG0_value <= 0;
    end
    else begin
        if (SBA_PWM0_loadCNT) begin
            SBA_PWM0_DataPath0_CountDown_REG0_value <= SBA_PWM0_DataPath0_period;
        end
        else if (SBA_PWM0_EN_CNT) begin
            SBA_PWM0_DataPath0_CountDown_REG0_value <= (SBA_PWM0_DataPath0_CountDown_REG0_value - 1);
        end
    end
end


always @(SBA_PWM0_DataPath0_CNT_out) begin: MICROCONTROLLER_SBA_PWM0_DATAPATH0_ZERO_COMP0_COMP
    if ((SBA_PWM0_DataPath0_CNT_out == 0)) begin
        SBA_PWM0_is_zero = 1;
    end
    else begin
        SBA_PWM0_is_zero = 0;
    end
end


always @(SBA_PWM0_DataPath0_CNT_out, SBA_PWM0_DataPath0_COMP1_out) begin: MICROCONTROLLER_SBA_PWM0_DATAPATH0_ACTIVE_COMPARATOR0_COMP
    if ((SBA_PWM0_DataPath0_CNT_out < SBA_PWM0_DataPath0_COMP1_out)) begin
        PWM_Signal = 1;
    end
    else begin
        PWM_Signal = 0;
    end
end



assign SBA_PWM0_DataPath0_load_enable = BusSystem0_STB_O_3[3];


always @(posedge SBA_PWM0_DataPath0_load_enable) begin: MICROCONTROLLER_SBA_PWM0_DATAPATH0_CONNECT
    if (BusSystem0_STB_O_3[3]) begin
        SBA_PWM0_DataPath0_period <= SLV_DAT_I[32-1:16];
        SBA_PWM0_DataPath0_active <= SLV_DAT_I[16-1:0];
    end
end


always @(posedge CLK_O) begin: MICROCONTROLLER_SBA_PWM0_CONTROLUNIT0_CU
    if (RST_O) begin
        SBA_PWM0_load_comp <= 1'b0;
        SBA_PWM0_loadCNT <= 1'b0;
        SBA_PWM0_EN_CNT <= 1'b0;
        SBA_PWM0_ControlUnit0_state <= 1'b0;
    end
    else begin
        SBA_PWM0_load_comp <= 1'b0;
        SBA_PWM0_loadCNT <= 1'b0;
        SBA_PWM0_EN_CNT <= 1'b0;
        case (SBA_PWM0_ControlUnit0_state)
            'h0: begin
                SBA_PWM0_EN_CNT <= 1'b0;
                SBA_PWM0_load_comp <= 1'b1;
                SBA_PWM0_loadCNT <= 1'b1;
                if (SBA_PWM0_ControlUnit0_D_edge) begin
                    SBA_PWM0_ControlUnit0_state <= 1'b1;
                end
                else begin
                    SBA_PWM0_ControlUnit0_state <= 0;
                end
            end
            'h1: begin
                SBA_PWM0_EN_CNT <= 1'b1;
                if (SBA_PWM0_is_zero) begin
                    SBA_PWM0_loadCNT <= 1'b1;
                end
                else if (((BusSystem0_STB_O_3[1] == 0) && (BusSystem0_STB_O_3[3] == 1))) begin
                    SBA_PWM0_ControlUnit0_state <= 1'b0;
                end
            end
            default: begin
                SBA_PWM0_ControlUnit0_state <= 1'b0;
            end
        endcase
        if ((SBA_PWM0_ControlUnit0_D_edge && BusSystem0_STB_O_3[3])) begin
            SBA_PWM0_loadCNT <= 1'b1;
            SBA_PWM0_load_comp <= 1'b1;
        end
    end
end


always @(posedge CLK_O, posedge RST_O) begin: MICROCONTROLLER_SBA_PWM0_CONTROLUNIT0_INPUT_DETECT
    if (RST_O) begin
        SBA_PWM0_ControlUnit0_R_edge <= 0;
    end
    else begin
        if (BusSystem0_STB_O_3[3]) begin
            SBA_PWM0_ControlUnit0_R_edge <= {SBA_PWM0_ControlUnit0_R_edge[0], BusSystem0_STB_O_3[1]};
        end
    end
end



assign SBA_PWM0_ControlUnit0_D_edge = ((!SBA_PWM0_ControlUnit0_R_edge[1]) && SBA_PWM0_ControlUnit0_R_edge[0]);



assign SBA_TIMER0_enable = BusSystem0_STB_O_4[3];
assign SBA_TIMER0_start = BusSystem0_STB_O_4[1];
assign SBA_TIMER0_stop = BusSystem0_STB_O_4[0];


always @(posedge CLK_O, posedge RST_O) begin: MICROCONTROLLER_SBA_TIMER0_STATE_MACHINE
    if (RST_O) begin
        SBA_TIMER0_state <= 1'b0;
    end
    else begin
        SBA_TIMER0_state <= SBA_TIMER0_next_state;
    end
end


always @(posedge BusSystem0_SLV_DAT_O_4, posedge SBA_TIMER0_enable, posedge SBA_TIMER0_start, posedge SBA_TIMER0_stop) begin: MICROCONTROLLER_SBA_TIMER0_NEXT_STATE_MACHINE
    case (SBA_TIMER0_state)
        'h0: begin
            if ((SBA_TIMER0_enable == 1)) begin
                SBA_TIMER0_next_state <= 1'b1;
                SBA_TIMER0_base_reg <= SLV_DAT_I;
            end
            else begin
                SBA_TIMER0_next_state <= 1'b0;
            end
        end
        'h1: begin
            if ((SBA_TIMER0_stop == 1)) begin
                SBA_TIMER0_next_state <= 1'b0;
            end
            else if ((BusSystem0_SLV_DAT_O_4 == 1)) begin
                SBA_TIMER0_next_state <= 1'b0;
            end
            else begin
                SBA_TIMER0_next_state <= 1'b1;
            end
        end
        default: begin
            SBA_TIMER0_next_state <= 1'b0;
        end
    endcase
end


always @(SBA_TIMER0_state) begin: MICROCONTROLLER_SBA_TIMER0_ENABLE_MACHINE
    if ((SBA_TIMER0_state == 1)) begin
        SBA_TIMER0_count_enable <= 1'b1;
    end
    else begin
        SBA_TIMER0_count_enable <= 1'b0;
    end
end


always @(posedge CLK_O, posedge RST_O) begin: MICROCONTROLLER_SBA_TIMER0_TIMER
    if (RST_O) begin
        BusSystem0_SLV_DAT_O_4 <= 1'b0;
        SBA_TIMER0_counter <= 1'b0;
    end
    else begin
        if ((!SBA_TIMER0_count_enable)) begin
            SBA_TIMER0_counter <= SBA_TIMER0_base_reg;
            if (SBA_TIMER0_next_state) begin
                BusSystem0_SLV_DAT_O_4 <= 1'b0;
            end
        end
        if (SBA_TIMER0_count_enable) begin
            SBA_TIMER0_counter <= (SBA_TIMER0_counter + 1);
            if ((SBA_TIMER0_counter == 255)) begin
                BusSystem0_SLV_DAT_O_4 <= 1'b1;
                SBA_TIMER0_counter <= 1'b0;
            end
        end
    end
end


always @(posedge CLK_O) begin: MICROCONTROLLER_SBA_UART_SYS0_UART_CONTROLLER0_CONNECTION
    SBA_UART_SYS0_TxFlag <= SBA_UART_SYS0_TxDone;
    SBA_UART_SYS0_RxFlag <= SBA_UART_SYS0_RxDone;
    SBA_UART_SYS0_RxEn <= 1'b1;
    SBA_UART_SYS0_UART_DAT_OUT <= SBA_UART_SYS0_RxData;
    if ((BusSystem0_STB_O_5[3] == 1)) begin
        SBA_UART_SYS0_baud_rate <= SLV_DAT_I[32-1:16];
        SBA_UART_SYS0_TxData <= SLV_DAT_I[8-1:0];
        if (WE_O) begin
            SBA_UART_SYS0_TxEn <= 1'b1;
            SBA_UART_SYS0_BRG_En <= 1'b1;
        end
        else begin
            SBA_UART_SYS0_BRG_En <= 1'b0;
        end
    end
    else begin
        SBA_UART_SYS0_TxEn <= 1'b0;
    end
end


always @(posedge CLK_O, posedge RST_O) begin: MICROCONTROLLER_SBA_UART_SYS0_UART0_RX0_RESET_MODULE
    if (RST_O) begin
        SBA_UART_SYS0_UART0_RX0_state <= 1'b0;
    end
    else begin
        SBA_UART_SYS0_UART0_RX0_state <= SBA_UART_SYS0_UART0_RX0_next_state;
    end
end


always @(SBA_UART_SYS0_UART0_RX0_state, RX, SBA_UART_SYS0_RxEn, SBA_UART_SYS0_RxDone) begin: MICROCONTROLLER_SBA_UART_SYS0_UART0_RX0_NEXT_STATE_MODULE
    case (SBA_UART_SYS0_UART0_RX0_state)
        'h0: begin
            if (((!RX) && SBA_UART_SYS0_RxEn)) begin
                SBA_UART_SYS0_UART0_RX0_next_state <= 1'b1;
            end
            else begin
                SBA_UART_SYS0_UART0_RX0_next_state <= 1'b0;
            end
        end
        'h1: begin
            if (SBA_UART_SYS0_RxDone) begin
                SBA_UART_SYS0_UART0_RX0_next_state <= 1'b0;
            end
            else begin
                SBA_UART_SYS0_UART0_RX0_next_state <= 1'b1;
            end
        end
        default: begin
            SBA_UART_SYS0_UART0_RX0_next_state <= 1'b0;
        end
    endcase
end


always @(SBA_UART_SYS0_UART0_RX0_state, SBA_UART_SYS0_RxDone) begin: MICROCONTROLLER_SBA_UART_SYS0_UART0_RX0_ENABLE_READ_FUNC
    if ((SBA_UART_SYS0_UART0_RX0_state == 1)) begin
        SBA_UART_SYS0_UART0_RX0_read_enable <= 1'b1;
    end
    else begin
        SBA_UART_SYS0_UART0_RX0_read_enable <= 1'b0;
    end
end


always @(posedge SBA_UART_SYS0_UART0_tick) begin: MICROCONTROLLER_SBA_UART_SYS0_UART0_RX0_READ_DATA_FUNC
    if (SBA_UART_SYS0_UART0_RX0_read_enable) begin
        SBA_UART_SYS0_RxDone <= 1'b0;
        SBA_UART_SYS0_UART0_RX0_counter <= (SBA_UART_SYS0_UART0_RX0_counter + 1);
        if (((SBA_UART_SYS0_UART0_RX0_counter == 8) && SBA_UART_SYS0_UART0_RX0_start_bit)) begin
            SBA_UART_SYS0_UART0_RX0_start_bit <= 1'b0;
            SBA_UART_SYS0_UART0_RX0_counter <= 1'b0;
        end
        if (((SBA_UART_SYS0_UART0_RX0_counter == 15) && (!SBA_UART_SYS0_UART0_RX0_start_bit) && (SBA_UART_SYS0_UART0_RX0_Bit < SBA_UART_SYS0_UART0_Nbits))) begin
            SBA_UART_SYS0_UART0_RX0_Bit <= (SBA_UART_SYS0_UART0_RX0_Bit + 1);
            SBA_UART_SYS0_UART0_RX0_Read_data <= {RX, SBA_UART_SYS0_UART0_RX0_Read_data[8-1:1]};
            SBA_UART_SYS0_UART0_RX0_counter <= 1'b0;
        end
        if (((SBA_UART_SYS0_UART0_RX0_counter == 15) && (SBA_UART_SYS0_UART0_RX0_Bit == SBA_UART_SYS0_UART0_Nbits) && RX)) begin
            SBA_UART_SYS0_UART0_RX0_Bit <= 1'b0;
            SBA_UART_SYS0_RxDone <= 1'b1;
            SBA_UART_SYS0_UART0_RX0_counter <= 1'b0;
            SBA_UART_SYS0_UART0_RX0_start_bit <= 1'b1;
        end
    end
end


always @(posedge CLK_O) begin: MICROCONTROLLER_SBA_UART_SYS0_UART0_RX0_ASSIGN_OUTPUT
    if ((SBA_UART_SYS0_UART0_Nbits == 8)) begin
        SBA_UART_SYS0_RxData <= SBA_UART_SYS0_UART0_RX0_Read_data[8-1:0];
    end
    if ((SBA_UART_SYS0_UART0_Nbits == 7)) begin
        SBA_UART_SYS0_RxData <= {1'b0, SBA_UART_SYS0_UART0_RX0_Read_data[8-1:1]};
    end
    if ((SBA_UART_SYS0_UART0_Nbits == 6)) begin
        SBA_UART_SYS0_RxData <= {1'b0, 1'b0, SBA_UART_SYS0_UART0_RX0_Read_data[8-1:2]};
    end
end


always @(posedge CLK_O, posedge RST_O) begin: MICROCONTROLLER_SBA_UART_SYS0_UART0_TX0_RESET_MODULE
    if (RST_O) begin
        SBA_UART_SYS0_UART0_TX0_state <= 1'b0;
    end
    else begin
        SBA_UART_SYS0_UART0_TX0_state <= SBA_UART_SYS0_UART0_TX0_next_state;
    end
end


always @(SBA_UART_SYS0_UART0_TX0_state, SBA_UART_SYS0_UART0_TX0_D_edge, SBA_UART_SYS0_TxData, SBA_UART_SYS0_TxDone) begin: MICROCONTROLLER_SBA_UART_SYS0_UART0_TX0_NEXT_STATE_MODULE
    case (SBA_UART_SYS0_UART0_TX0_state)
        'h0: begin
            if (SBA_UART_SYS0_UART0_TX0_D_edge) begin
                SBA_UART_SYS0_UART0_TX0_next_state <= 1'b1;
            end
            else begin
                SBA_UART_SYS0_UART0_TX0_next_state <= 1'b0;
            end
        end
        'h1: begin
            if (SBA_UART_SYS0_TxDone) begin
                SBA_UART_SYS0_UART0_TX0_next_state <= 1'b0;
            end
            else begin
                SBA_UART_SYS0_UART0_TX0_next_state <= 1'b1;
            end
        end
        default: begin
            SBA_UART_SYS0_UART0_TX0_next_state <= 1'b0;
        end
    endcase
end


always @(SBA_UART_SYS0_UART0_TX0_state) begin: MICROCONTROLLER_SBA_UART_SYS0_UART0_TX0_WRITE_ENABLE_FUNC
    if ((SBA_UART_SYS0_UART0_TX0_state == 1)) begin
        SBA_UART_SYS0_UART0_TX0_write_enable <= 1'b1;
    end
    else begin
        SBA_UART_SYS0_UART0_TX0_write_enable <= 1'b0;
    end
end


always @(posedge SBA_UART_SYS0_UART0_tick) begin: MICROCONTROLLER_SBA_UART_SYS0_UART0_TX0_TX_OUTPUT
    if ((!SBA_UART_SYS0_UART0_TX0_write_enable)) begin
        if (SBA_UART_SYS0_TxEn) begin
            SBA_UART_SYS0_TxDone <= 1'b0;
        end
        SBA_UART_SYS0_UART0_TX0_start_bit <= 1'b1;
        SBA_UART_SYS0_UART0_TX0_stop_bit <= 1'b0;
    end
    else if (SBA_UART_SYS0_UART0_TX0_write_enable) begin
        SBA_UART_SYS0_UART0_TX0_counter <= (SBA_UART_SYS0_UART0_TX0_counter + 1);
        if ((SBA_UART_SYS0_UART0_TX0_start_bit && (!SBA_UART_SYS0_UART0_TX0_stop_bit))) begin
            TX <= 1'b0;
            SBA_UART_SYS0_UART0_TX0_in_data <= SBA_UART_SYS0_TxData;
        end
        if (((SBA_UART_SYS0_UART0_TX0_counter == 15) && SBA_UART_SYS0_UART0_TX0_start_bit)) begin
            SBA_UART_SYS0_UART0_TX0_start_bit <= 1'b0;
            SBA_UART_SYS0_UART0_TX0_in_data <= {1'b0, SBA_UART_SYS0_UART0_TX0_in_data[8-1:1]};
            TX <= SBA_UART_SYS0_UART0_TX0_in_data[0];
        end
        if (((SBA_UART_SYS0_UART0_TX0_counter == 15) && (!SBA_UART_SYS0_UART0_TX0_start_bit) && ($signed({1'b0, SBA_UART_SYS0_UART0_TX0_Bit}) < ($signed({1'b0, SBA_UART_SYS0_UART0_Nbits}) - 1)))) begin
            SBA_UART_SYS0_UART0_TX0_in_data <= {1'b0, SBA_UART_SYS0_UART0_TX0_in_data[8-1:1]};
            SBA_UART_SYS0_UART0_TX0_Bit <= (SBA_UART_SYS0_UART0_TX0_Bit + 1);
            TX <= SBA_UART_SYS0_UART0_TX0_in_data[0];
            SBA_UART_SYS0_UART0_TX0_start_bit <= 1'b0;
            SBA_UART_SYS0_UART0_TX0_counter <= 1'b0;
        end
        if (((SBA_UART_SYS0_UART0_TX0_counter == 15) && ($signed({1'b0, SBA_UART_SYS0_UART0_TX0_Bit}) == ($signed({1'b0, SBA_UART_SYS0_UART0_Nbits}) - 1)) && (!SBA_UART_SYS0_UART0_TX0_stop_bit))) begin
            TX <= 1'b1;
            SBA_UART_SYS0_UART0_TX0_counter <= 1'b0;
            SBA_UART_SYS0_UART0_TX0_stop_bit <= 1'b1;
        end
        if (((SBA_UART_SYS0_UART0_TX0_counter == 15) && ($signed({1'b0, SBA_UART_SYS0_UART0_TX0_Bit}) == ($signed({1'b0, SBA_UART_SYS0_UART0_Nbits}) - 1)) && SBA_UART_SYS0_UART0_TX0_stop_bit)) begin
            SBA_UART_SYS0_UART0_TX0_Bit <= 1'b0;
            SBA_UART_SYS0_TxDone <= 1'b1;
            SBA_UART_SYS0_UART0_TX0_counter <= 1'b0;
        end
    end
end


always @(posedge CLK_O, posedge RST_O) begin: MICROCONTROLLER_SBA_UART_SYS0_UART0_TX0_INPUT_DETECT
    if (RST_O) begin
        SBA_UART_SYS0_UART0_TX0_R_edge <= 0;
    end
    else begin
        SBA_UART_SYS0_UART0_TX0_R_edge <= {SBA_UART_SYS0_UART0_TX0_R_edge[0], SBA_UART_SYS0_TxEn};
    end
end



assign SBA_UART_SYS0_UART0_TX0_D_edge = ((!SBA_UART_SYS0_UART0_TX0_R_edge[1]) && SBA_UART_SYS0_UART0_TX0_R_edge[0]);


always @(posedge CLK_O, posedge RST_O) begin: MICROCONTROLLER_SBA_UART_SYS0_UART0_BRG0_GEN
    if (RST_O) begin
        SBA_UART_SYS0_UART0_BRG0_baudRateReg <= 1'b1;
    end
    else begin
        if (SBA_UART_SYS0_UART0_BRG0_D_edge) begin
            SBA_UART_SYS0_UART0_BRG0_baudRateReg <= 1'b1;
        end
        else if ((SBA_UART_SYS0_UART0_tick == 1)) begin
            SBA_UART_SYS0_UART0_BRG0_baudRateReg <= 1'b1;
        end
        else begin
            SBA_UART_SYS0_UART0_BRG0_baudRateReg <= (SBA_UART_SYS0_UART0_BRG0_baudRateReg + 1);
        end
    end
end



assign SBA_UART_SYS0_UART0_tick = (SBA_UART_SYS0_UART0_BRG0_baudRateReg == SBA_UART_SYS0_baud_rate);


always @(posedge CLK_O) begin: MICROCONTROLLER_SBA_UART_SYS0_UART0_BRG0_INPUT_DETECT
    if (RST_O) begin
        SBA_UART_SYS0_UART0_BRG0_R_edge <= 0;
    end
    else begin
        SBA_UART_SYS0_UART0_BRG0_R_edge <= {SBA_UART_SYS0_UART0_BRG0_R_edge[0], SBA_UART_SYS0_BRG_En};
    end
end



assign SBA_UART_SYS0_UART0_BRG0_D_edge = ((!SBA_UART_SYS0_UART0_BRG0_R_edge[1]) && SBA_UART_SYS0_UART0_BRG0_R_edge[0]);


always @(SBA_UART_SYS0_TxFlag, BusSystem0_STB_O_5, SBA_UART_SYS0_RxFlag, SBA_UART_SYS0_UART_DAT_OUT) begin: MICROCONTROLLER_SBA_UART_SYS0_CONNECTION
    case (BusSystem0_STB_O_5)
        'h8: begin
            BusSystem0_SLV_DAT_O_5 = SBA_UART_SYS0_UART_DAT_OUT;
        end
        'h9: begin
            BusSystem0_SLV_DAT_O_5 = SBA_UART_SYS0_RxFlag;
        end
        'ha: begin
            BusSystem0_SLV_DAT_O_5 = SBA_UART_SYS0_TxFlag;
        end
    endcase
end


always @(input_port_data, BusSystem0_STB_O_6) begin: MICROCONTROLLER_INPUT_PORT0_SEND
    if (BusSystem0_STB_O_6[3]) begin
        BusSystem0_SLV_DAT_O_6 = input_port_data;
    end
end

endmodule
